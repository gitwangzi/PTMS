//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Gsafety.PTMS.ServiceReference.LogTestService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LogTestService.ILogTest")]
    public interface ILogTest {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILogTest/ShowLogName", ReplyAction="http://tempuri.org/ILogTest/ShowLogNameResponse")]
        System.IAsyncResult BeginShowLogName(System.AsyncCallback callback, object asyncState);
        
        string EndShowLogName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILogTest/ShowLogName2", ReplyAction="http://tempuri.org/ILogTest/ShowLogName2Response")]
        System.IAsyncResult BeginShowLogName2(System.AsyncCallback callback, object asyncState);
        
        string EndShowLogName2(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogTestChannel : Gsafety.PTMS.ServiceReference.LogTestService.ILogTest, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShowLogNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShowLogNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShowLogName2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShowLogName2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogTestClient : System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.LogTestService.ILogTest>, Gsafety.PTMS.ServiceReference.LogTestService.ILogTest {
        
        private BeginOperationDelegate onBeginShowLogNameDelegate;
        
        private EndOperationDelegate onEndShowLogNameDelegate;
        
        private System.Threading.SendOrPostCallback onShowLogNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginShowLogName2Delegate;
        
        private EndOperationDelegate onEndShowLogName2Delegate;
        
        private System.Threading.SendOrPostCallback onShowLogName2CompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LogTestClient() {
        }
        
        public LogTestClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogTestClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogTestClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogTestClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<ShowLogNameCompletedEventArgs> ShowLogNameCompleted;
        
        public event System.EventHandler<ShowLogName2CompletedEventArgs> ShowLogName2Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.LogTestService.ILogTest.BeginShowLogName(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShowLogName(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Gsafety.PTMS.ServiceReference.LogTestService.ILogTest.EndShowLogName(System.IAsyncResult result) {
            return base.Channel.EndShowLogName(result);
        }
        
        private System.IAsyncResult OnBeginShowLogName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Gsafety.PTMS.ServiceReference.LogTestService.ILogTest)(this)).BeginShowLogName(callback, asyncState);
        }
        
        private object[] OnEndShowLogName(System.IAsyncResult result) {
            string retVal = ((Gsafety.PTMS.ServiceReference.LogTestService.ILogTest)(this)).EndShowLogName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShowLogNameCompleted(object state) {
            if ((this.ShowLogNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShowLogNameCompleted(this, new ShowLogNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShowLogNameAsync() {
            this.ShowLogNameAsync(null);
        }
        
        public void ShowLogNameAsync(object userState) {
            if ((this.onBeginShowLogNameDelegate == null)) {
                this.onBeginShowLogNameDelegate = new BeginOperationDelegate(this.OnBeginShowLogName);
            }
            if ((this.onEndShowLogNameDelegate == null)) {
                this.onEndShowLogNameDelegate = new EndOperationDelegate(this.OnEndShowLogName);
            }
            if ((this.onShowLogNameCompletedDelegate == null)) {
                this.onShowLogNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShowLogNameCompleted);
            }
            base.InvokeAsync(this.onBeginShowLogNameDelegate, null, this.onEndShowLogNameDelegate, this.onShowLogNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.LogTestService.ILogTest.BeginShowLogName2(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShowLogName2(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Gsafety.PTMS.ServiceReference.LogTestService.ILogTest.EndShowLogName2(System.IAsyncResult result) {
            return base.Channel.EndShowLogName2(result);
        }
        
        private System.IAsyncResult OnBeginShowLogName2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Gsafety.PTMS.ServiceReference.LogTestService.ILogTest)(this)).BeginShowLogName2(callback, asyncState);
        }
        
        private object[] OnEndShowLogName2(System.IAsyncResult result) {
            string retVal = ((Gsafety.PTMS.ServiceReference.LogTestService.ILogTest)(this)).EndShowLogName2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShowLogName2Completed(object state) {
            if ((this.ShowLogName2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShowLogName2Completed(this, new ShowLogName2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShowLogName2Async() {
            this.ShowLogName2Async(null);
        }
        
        public void ShowLogName2Async(object userState) {
            if ((this.onBeginShowLogName2Delegate == null)) {
                this.onBeginShowLogName2Delegate = new BeginOperationDelegate(this.OnBeginShowLogName2);
            }
            if ((this.onEndShowLogName2Delegate == null)) {
                this.onEndShowLogName2Delegate = new EndOperationDelegate(this.OnEndShowLogName2);
            }
            if ((this.onShowLogName2CompletedDelegate == null)) {
                this.onShowLogName2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShowLogName2Completed);
            }
            base.InvokeAsync(this.onBeginShowLogName2Delegate, null, this.onEndShowLogName2Delegate, this.onShowLogName2CompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Gsafety.PTMS.ServiceReference.LogTestService.ILogTest CreateChannel() {
            return new LogTestClientChannel(this);
        }
        
        private class LogTestClientChannel : ChannelBase<Gsafety.PTMS.ServiceReference.LogTestService.ILogTest>, Gsafety.PTMS.ServiceReference.LogTestService.ILogTest {
            
            public LogTestClientChannel(System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.LogTestService.ILogTest> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginShowLogName(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ShowLogName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndShowLogName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ShowLogName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShowLogName2(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ShowLogName2", _args, callback, asyncState);
                return _result;
            }
            
            public string EndShowLogName2(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ShowLogName2", _args, result)));
                return _result;
            }
        }
    }
}
