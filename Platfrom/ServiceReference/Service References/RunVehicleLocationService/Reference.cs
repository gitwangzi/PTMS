//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Gsafety.PTMS.ServiceReference.RunVehicleLocationService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunVehicleLocation", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.BaseInformation.Contract.Dat" +
        "a")]
    public partial class RunVehicleLocation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal AlarmFlagField;
        
        private string ClientIdField;
        
        private string DirectionField;
        
        private string DistrictCodeField;
        
        private System.Nullable<System.DateTime> GpsTimeField;
        
        private string GpsValidField;
        
        private string IDField;
        
        private string LatitudeField;
        
        private string LongitudeField;
        
        private decimal SourceField;
        
        private string SpeedField;
        
        private decimal StatusFlagField;
        
        private string VehicleIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AlarmFlag {
            get {
                return this.AlarmFlagField;
            }
            set {
                if ((this.AlarmFlagField.Equals(value) != true)) {
                    this.AlarmFlagField = value;
                    this.RaisePropertyChanged("AlarmFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIdField, value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectionField, value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DistrictCode {
            get {
                return this.DistrictCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.DistrictCodeField, value) != true)) {
                    this.DistrictCodeField = value;
                    this.RaisePropertyChanged("DistrictCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> GpsTime {
            get {
                return this.GpsTimeField;
            }
            set {
                if ((this.GpsTimeField.Equals(value) != true)) {
                    this.GpsTimeField = value;
                    this.RaisePropertyChanged("GpsTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GpsValid {
            get {
                return this.GpsValidField;
            }
            set {
                if ((object.ReferenceEquals(this.GpsValidField, value) != true)) {
                    this.GpsValidField = value;
                    this.RaisePropertyChanged("GpsValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LatitudeField, value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LongitudeField, value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Source {
            get {
                return this.SourceField;
            }
            set {
                if ((this.SourceField.Equals(value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SpeedField, value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal StatusFlag {
            get {
                return this.StatusFlagField;
            }
            set {
                if ((this.StatusFlagField.Equals(value) != true)) {
                    this.StatusFlagField = value;
                    this.RaisePropertyChanged("StatusFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleId {
            get {
                return this.VehicleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleIdField, value) != true)) {
                    this.VehicleIdField = value;
                    this.RaisePropertyChanged("VehicleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleMessageOfboolean", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class SingleMessageOfboolean : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private bool ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleMessageOfRunVehicleLocationh_PhsrrDr", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class SingleMessageOfRunVehicleLocationh_PhsrrDr : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfRunVehicleLocationh_PhsrrDr", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfRunVehicleLocationh_PhsrrDr : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RunVehicleLocationService.IRunVehicleLocationService")]
    public interface IRunVehicleLocationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunVehicleLocationService/InsertRunVehicleLocation", ReplyAction="http://tempuri.org/IRunVehicleLocationService/InsertRunVehicleLocationResponse")]
        System.IAsyncResult BeginInsertRunVehicleLocation(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean EndInsertRunVehicleLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunVehicleLocationService/UpdateRunVehicleLocation", ReplyAction="http://tempuri.org/IRunVehicleLocationService/UpdateRunVehicleLocationResponse")]
        System.IAsyncResult BeginUpdateRunVehicleLocation(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean EndUpdateRunVehicleLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunVehicleLocationService/DeleteRunVehicleLocationByID", ReplyAction="http://tempuri.org/IRunVehicleLocationService/DeleteRunVehicleLocationByIDRespons" +
            "e")]
        System.IAsyncResult BeginDeleteRunVehicleLocationByID(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean EndDeleteRunVehicleLocationByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunVehicleLocationService/GetRunVehicleLocation", ReplyAction="http://tempuri.org/IRunVehicleLocationService/GetRunVehicleLocationResponse")]
        System.IAsyncResult BeginGetRunVehicleLocation(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr EndGetRunVehicleLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunVehicleLocationService/GetRunVehicleLocationList", ReplyAction="http://tempuri.org/IRunVehicleLocationService/GetRunVehicleLocationListResponse")]
        System.IAsyncResult BeginGetRunVehicleLocationList(int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr EndGetRunVehicleLocationList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRunVehicleLocationServiceChannel : Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertRunVehicleLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertRunVehicleLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateRunVehicleLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateRunVehicleLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteRunVehicleLocationByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteRunVehicleLocationByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunVehicleLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRunVehicleLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunVehicleLocationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRunVehicleLocationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunVehicleLocationServiceClient : System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService>, Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService {
        
        private BeginOperationDelegate onBeginInsertRunVehicleLocationDelegate;
        
        private EndOperationDelegate onEndInsertRunVehicleLocationDelegate;
        
        private System.Threading.SendOrPostCallback onInsertRunVehicleLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateRunVehicleLocationDelegate;
        
        private EndOperationDelegate onEndUpdateRunVehicleLocationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateRunVehicleLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRunVehicleLocationByIDDelegate;
        
        private EndOperationDelegate onEndDeleteRunVehicleLocationByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRunVehicleLocationByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunVehicleLocationDelegate;
        
        private EndOperationDelegate onEndGetRunVehicleLocationDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunVehicleLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunVehicleLocationListDelegate;
        
        private EndOperationDelegate onEndGetRunVehicleLocationListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunVehicleLocationListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public RunVehicleLocationServiceClient() {
        }
        
        public RunVehicleLocationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RunVehicleLocationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RunVehicleLocationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RunVehicleLocationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<InsertRunVehicleLocationCompletedEventArgs> InsertRunVehicleLocationCompleted;
        
        public event System.EventHandler<UpdateRunVehicleLocationCompletedEventArgs> UpdateRunVehicleLocationCompleted;
        
        public event System.EventHandler<DeleteRunVehicleLocationByIDCompletedEventArgs> DeleteRunVehicleLocationByIDCompleted;
        
        public event System.EventHandler<GetRunVehicleLocationCompletedEventArgs> GetRunVehicleLocationCompleted;
        
        public event System.EventHandler<GetRunVehicleLocationListCompletedEventArgs> GetRunVehicleLocationListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.BeginInsertRunVehicleLocation(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertRunVehicleLocation(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.EndInsertRunVehicleLocation(System.IAsyncResult result) {
            return base.Channel.EndInsertRunVehicleLocation(result);
        }
        
        private System.IAsyncResult OnBeginInsertRunVehicleLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).BeginInsertRunVehicleLocation(model, callback, asyncState);
        }
        
        private object[] OnEndInsertRunVehicleLocation(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).EndInsertRunVehicleLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertRunVehicleLocationCompleted(object state) {
            if ((this.InsertRunVehicleLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertRunVehicleLocationCompleted(this, new InsertRunVehicleLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertRunVehicleLocationAsync(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model) {
            this.InsertRunVehicleLocationAsync(model, null);
        }
        
        public void InsertRunVehicleLocationAsync(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, object userState) {
            if ((this.onBeginInsertRunVehicleLocationDelegate == null)) {
                this.onBeginInsertRunVehicleLocationDelegate = new BeginOperationDelegate(this.OnBeginInsertRunVehicleLocation);
            }
            if ((this.onEndInsertRunVehicleLocationDelegate == null)) {
                this.onEndInsertRunVehicleLocationDelegate = new EndOperationDelegate(this.OnEndInsertRunVehicleLocation);
            }
            if ((this.onInsertRunVehicleLocationCompletedDelegate == null)) {
                this.onInsertRunVehicleLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertRunVehicleLocationCompleted);
            }
            base.InvokeAsync(this.onBeginInsertRunVehicleLocationDelegate, new object[] {
                        model}, this.onEndInsertRunVehicleLocationDelegate, this.onInsertRunVehicleLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.BeginUpdateRunVehicleLocation(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateRunVehicleLocation(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.EndUpdateRunVehicleLocation(System.IAsyncResult result) {
            return base.Channel.EndUpdateRunVehicleLocation(result);
        }
        
        private System.IAsyncResult OnBeginUpdateRunVehicleLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).BeginUpdateRunVehicleLocation(model, callback, asyncState);
        }
        
        private object[] OnEndUpdateRunVehicleLocation(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).EndUpdateRunVehicleLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateRunVehicleLocationCompleted(object state) {
            if ((this.UpdateRunVehicleLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateRunVehicleLocationCompleted(this, new UpdateRunVehicleLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateRunVehicleLocationAsync(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model) {
            this.UpdateRunVehicleLocationAsync(model, null);
        }
        
        public void UpdateRunVehicleLocationAsync(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, object userState) {
            if ((this.onBeginUpdateRunVehicleLocationDelegate == null)) {
                this.onBeginUpdateRunVehicleLocationDelegate = new BeginOperationDelegate(this.OnBeginUpdateRunVehicleLocation);
            }
            if ((this.onEndUpdateRunVehicleLocationDelegate == null)) {
                this.onEndUpdateRunVehicleLocationDelegate = new EndOperationDelegate(this.OnEndUpdateRunVehicleLocation);
            }
            if ((this.onUpdateRunVehicleLocationCompletedDelegate == null)) {
                this.onUpdateRunVehicleLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateRunVehicleLocationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateRunVehicleLocationDelegate, new object[] {
                        model}, this.onEndUpdateRunVehicleLocationDelegate, this.onUpdateRunVehicleLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.BeginDeleteRunVehicleLocationByID(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRunVehicleLocationByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.EndDeleteRunVehicleLocationByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteRunVehicleLocationByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRunVehicleLocationByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).BeginDeleteRunVehicleLocationByID(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteRunVehicleLocationByID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).EndDeleteRunVehicleLocationByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteRunVehicleLocationByIDCompleted(object state) {
            if ((this.DeleteRunVehicleLocationByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRunVehicleLocationByIDCompleted(this, new DeleteRunVehicleLocationByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRunVehicleLocationByIDAsync(string ID) {
            this.DeleteRunVehicleLocationByIDAsync(ID, null);
        }
        
        public void DeleteRunVehicleLocationByIDAsync(string ID, object userState) {
            if ((this.onBeginDeleteRunVehicleLocationByIDDelegate == null)) {
                this.onBeginDeleteRunVehicleLocationByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteRunVehicleLocationByID);
            }
            if ((this.onEndDeleteRunVehicleLocationByIDDelegate == null)) {
                this.onEndDeleteRunVehicleLocationByIDDelegate = new EndOperationDelegate(this.OnEndDeleteRunVehicleLocationByID);
            }
            if ((this.onDeleteRunVehicleLocationByIDCompletedDelegate == null)) {
                this.onDeleteRunVehicleLocationByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRunVehicleLocationByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRunVehicleLocationByIDDelegate, new object[] {
                        ID}, this.onEndDeleteRunVehicleLocationByIDDelegate, this.onDeleteRunVehicleLocationByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.BeginGetRunVehicleLocation(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRunVehicleLocation(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.EndGetRunVehicleLocation(System.IAsyncResult result) {
            return base.Channel.EndGetRunVehicleLocation(result);
        }
        
        private System.IAsyncResult OnBeginGetRunVehicleLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).BeginGetRunVehicleLocation(ID, callback, asyncState);
        }
        
        private object[] OnEndGetRunVehicleLocation(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr retVal = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).EndGetRunVehicleLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunVehicleLocationCompleted(object state) {
            if ((this.GetRunVehicleLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunVehicleLocationCompleted(this, new GetRunVehicleLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunVehicleLocationAsync(string ID) {
            this.GetRunVehicleLocationAsync(ID, null);
        }
        
        public void GetRunVehicleLocationAsync(string ID, object userState) {
            if ((this.onBeginGetRunVehicleLocationDelegate == null)) {
                this.onBeginGetRunVehicleLocationDelegate = new BeginOperationDelegate(this.OnBeginGetRunVehicleLocation);
            }
            if ((this.onEndGetRunVehicleLocationDelegate == null)) {
                this.onEndGetRunVehicleLocationDelegate = new EndOperationDelegate(this.OnEndGetRunVehicleLocation);
            }
            if ((this.onGetRunVehicleLocationCompletedDelegate == null)) {
                this.onGetRunVehicleLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunVehicleLocationCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunVehicleLocationDelegate, new object[] {
                        ID}, this.onEndGetRunVehicleLocationDelegate, this.onGetRunVehicleLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.BeginGetRunVehicleLocationList(int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRunVehicleLocationList(pageIndex, pageSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService.EndGetRunVehicleLocationList(System.IAsyncResult result) {
            return base.Channel.EndGetRunVehicleLocationList(result);
        }
        
        private System.IAsyncResult OnBeginGetRunVehicleLocationList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            int pageSize = ((int)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).BeginGetRunVehicleLocationList(pageIndex, pageSize, callback, asyncState);
        }
        
        private object[] OnEndGetRunVehicleLocationList(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr retVal = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService)(this)).EndGetRunVehicleLocationList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunVehicleLocationListCompleted(object state) {
            if ((this.GetRunVehicleLocationListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunVehicleLocationListCompleted(this, new GetRunVehicleLocationListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunVehicleLocationListAsync(int pageIndex, int pageSize) {
            this.GetRunVehicleLocationListAsync(pageIndex, pageSize, null);
        }
        
        public void GetRunVehicleLocationListAsync(int pageIndex, int pageSize, object userState) {
            if ((this.onBeginGetRunVehicleLocationListDelegate == null)) {
                this.onBeginGetRunVehicleLocationListDelegate = new BeginOperationDelegate(this.OnBeginGetRunVehicleLocationList);
            }
            if ((this.onEndGetRunVehicleLocationListDelegate == null)) {
                this.onEndGetRunVehicleLocationListDelegate = new EndOperationDelegate(this.OnEndGetRunVehicleLocationList);
            }
            if ((this.onGetRunVehicleLocationListCompletedDelegate == null)) {
                this.onGetRunVehicleLocationListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunVehicleLocationListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunVehicleLocationListDelegate, new object[] {
                        pageIndex,
                        pageSize}, this.onEndGetRunVehicleLocationListDelegate, this.onGetRunVehicleLocationListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService CreateChannel() {
            return new RunVehicleLocationServiceClientChannel(this);
        }
        
        private class RunVehicleLocationServiceClientChannel : ChannelBase<Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService>, Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService {
            
            public RunVehicleLocationServiceClientChannel(System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.RunVehicleLocationService.IRunVehicleLocationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginInsertRunVehicleLocation(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("InsertRunVehicleLocation", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean EndInsertRunVehicleLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean)(base.EndInvoke("InsertRunVehicleLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateRunVehicleLocation(Gsafety.PTMS.ServiceReference.RunVehicleLocationService.RunVehicleLocation model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("UpdateRunVehicleLocation", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean EndUpdateRunVehicleLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean)(base.EndInvoke("UpdateRunVehicleLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRunVehicleLocationByID(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRunVehicleLocationByID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean EndDeleteRunVehicleLocationByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfboolean)(base.EndInvoke("DeleteRunVehicleLocationByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunVehicleLocation(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("GetRunVehicleLocation", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr EndGetRunVehicleLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr _result = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.SingleMessageOfRunVehicleLocationh_PhsrrDr)(base.EndInvoke("GetRunVehicleLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunVehicleLocationList(int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = pageIndex;
                _args[1] = pageSize;
                System.IAsyncResult _result = base.BeginInvoke("GetRunVehicleLocationList", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr EndGetRunVehicleLocationList(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr _result = ((Gsafety.PTMS.ServiceReference.RunVehicleLocationService.MultiMessageOfRunVehicleLocationh_PhsrrDr)(base.EndInvoke("GetRunVehicleLocationList", _args, result)));
                return _result;
            }
        }
    }
}
