//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Gsafety.PTMS.ServiceReference.RunMonitorGroupService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunMonitorGroup", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Monitor.Contract.Data")]
    public partial class RunMonitorGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AdUserField;
        
        private decimal GroupIndexField;
        
        private string GroupNameField;
        
        private decimal GroupTypeField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroupVehicle> GroupVehicleField;
        
        private string IDField;
        
        private decimal IsDefaultField;
        
        private string NoteField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdUser {
            get {
                return this.AdUserField;
            }
            set {
                if ((object.ReferenceEquals(this.AdUserField, value) != true)) {
                    this.AdUserField = value;
                    this.RaisePropertyChanged("AdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal GroupIndex {
            get {
                return this.GroupIndexField;
            }
            set {
                if ((this.GroupIndexField.Equals(value) != true)) {
                    this.GroupIndexField = value;
                    this.RaisePropertyChanged("GroupIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal GroupType {
            get {
                return this.GroupTypeField;
            }
            set {
                if ((this.GroupTypeField.Equals(value) != true)) {
                    this.GroupTypeField = value;
                    this.RaisePropertyChanged("GroupType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroupVehicle> GroupVehicle {
            get {
                return this.GroupVehicleField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupVehicleField, value) != true)) {
                    this.GroupVehicleField = value;
                    this.RaisePropertyChanged("GroupVehicle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunMonitorGroupVehicle", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Monitor.Contract.Data")]
    public partial class RunMonitorGroupVehicle : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string GroupIdField;
        
        private string IDField;
        
        private Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup MonitorGroupField;
        
        private decimal TracedFlagField;
        
        private string VehicleIdField;
        
        private decimal VehicleIndexField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup MonitorGroup {
            get {
                return this.MonitorGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.MonitorGroupField, value) != true)) {
                    this.MonitorGroupField = value;
                    this.RaisePropertyChanged("MonitorGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TracedFlag {
            get {
                return this.TracedFlagField;
            }
            set {
                if ((this.TracedFlagField.Equals(value) != true)) {
                    this.TracedFlagField = value;
                    this.RaisePropertyChanged("TracedFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleId {
            get {
                return this.VehicleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleIdField, value) != true)) {
                    this.VehicleIdField = value;
                    this.RaisePropertyChanged("VehicleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal VehicleIndex {
            get {
                return this.VehicleIndexField;
            }
            set {
                if ((this.VehicleIndexField.Equals(value) != true)) {
                    this.VehicleIndexField = value;
                    this.RaisePropertyChanged("VehicleIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleMessageOfboolean", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class SingleMessageOfboolean : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private bool ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfRunMonitorGroupdrfzYGI1", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfRunMonitorGroupdrfzYGI1 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfRunMonitorGroupVehicledrfzYGI1", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfRunMonitorGroupVehicledrfzYGI1 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroupVehicle> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroupVehicle> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RunMonitorGroupService.IRunMonitorGroupService")]
    public interface IRunMonitorGroupService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunMonitorGroupService/ChangeRunMonitorGroup", ReplyAction="http://tempuri.org/IRunMonitorGroupService/ChangeRunMonitorGroupResponse")]
        System.IAsyncResult BeginChangeRunMonitorGroup(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> groupModel, string userID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndChangeRunMonitorGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunMonitorGroupService/DeleteRunMonitorGroupByID", ReplyAction="http://tempuri.org/IRunMonitorGroupService/DeleteRunMonitorGroupByIDResponse")]
        System.IAsyncResult BeginDeleteRunMonitorGroupByID(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndDeleteRunMonitorGroupByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunMonitorGroupService/GetRunMonitorGroupList", ReplyAction="http://tempuri.org/IRunMonitorGroupService/GetRunMonitorGroupListResponse")]
        System.IAsyncResult BeginGetRunMonitorGroupList(int pageIndex, int pageSize, string groupId, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1 EndGetRunMonitorGroupList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunMonitorGroupService/ChangeRunMonitorGroupVehicle", ReplyAction="http://tempuri.org/IRunMonitorGroupService/ChangeRunMonitorGroupVehicleResponse")]
        System.IAsyncResult BeginChangeRunMonitorGroupVehicle(string carNo, string groupId, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndChangeRunMonitorGroupVehicle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunMonitorGroupService/DeleteRunMonitorGroupVehicleByID", ReplyAction="http://tempuri.org/IRunMonitorGroupService/DeleteRunMonitorGroupVehicleByIDRespon" +
            "se")]
        System.IAsyncResult BeginDeleteRunMonitorGroupVehicleByID(string ID, string userID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndDeleteRunMonitorGroupVehicleByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRunMonitorGroupService/GetRunMonitorGroupVehicleList", ReplyAction="http://tempuri.org/IRunMonitorGroupService/GetRunMonitorGroupVehicleListResponse")]
        System.IAsyncResult BeginGetRunMonitorGroupVehicleList(int pageIndex, int pageSize, string userID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1 EndGetRunMonitorGroupVehicleList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRunMonitorGroupServiceChannel : Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeRunMonitorGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeRunMonitorGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteRunMonitorGroupByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteRunMonitorGroupByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunMonitorGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRunMonitorGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeRunMonitorGroupVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeRunMonitorGroupVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteRunMonitorGroupVehicleByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteRunMonitorGroupVehicleByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunMonitorGroupVehicleListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRunMonitorGroupVehicleListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunMonitorGroupServiceClient : System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService>, Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService {
        
        private BeginOperationDelegate onBeginChangeRunMonitorGroupDelegate;
        
        private EndOperationDelegate onEndChangeRunMonitorGroupDelegate;
        
        private System.Threading.SendOrPostCallback onChangeRunMonitorGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRunMonitorGroupByIDDelegate;
        
        private EndOperationDelegate onEndDeleteRunMonitorGroupByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRunMonitorGroupByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunMonitorGroupListDelegate;
        
        private EndOperationDelegate onEndGetRunMonitorGroupListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunMonitorGroupListCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeRunMonitorGroupVehicleDelegate;
        
        private EndOperationDelegate onEndChangeRunMonitorGroupVehicleDelegate;
        
        private System.Threading.SendOrPostCallback onChangeRunMonitorGroupVehicleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRunMonitorGroupVehicleByIDDelegate;
        
        private EndOperationDelegate onEndDeleteRunMonitorGroupVehicleByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRunMonitorGroupVehicleByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunMonitorGroupVehicleListDelegate;
        
        private EndOperationDelegate onEndGetRunMonitorGroupVehicleListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunMonitorGroupVehicleListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public RunMonitorGroupServiceClient() {
        }
        
        public RunMonitorGroupServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RunMonitorGroupServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RunMonitorGroupServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RunMonitorGroupServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<ChangeRunMonitorGroupCompletedEventArgs> ChangeRunMonitorGroupCompleted;
        
        public event System.EventHandler<DeleteRunMonitorGroupByIDCompletedEventArgs> DeleteRunMonitorGroupByIDCompleted;
        
        public event System.EventHandler<GetRunMonitorGroupListCompletedEventArgs> GetRunMonitorGroupListCompleted;
        
        public event System.EventHandler<ChangeRunMonitorGroupVehicleCompletedEventArgs> ChangeRunMonitorGroupVehicleCompleted;
        
        public event System.EventHandler<DeleteRunMonitorGroupVehicleByIDCompletedEventArgs> DeleteRunMonitorGroupVehicleByIDCompleted;
        
        public event System.EventHandler<GetRunMonitorGroupVehicleListCompletedEventArgs> GetRunMonitorGroupVehicleListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.BeginChangeRunMonitorGroup(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> groupModel, string userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeRunMonitorGroup(groupModel, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.EndChangeRunMonitorGroup(System.IAsyncResult result) {
            return base.Channel.EndChangeRunMonitorGroup(result);
        }
        
        private System.IAsyncResult OnBeginChangeRunMonitorGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> groupModel = ((System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup>)(inValues[0]));
            string userID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).BeginChangeRunMonitorGroup(groupModel, userID, callback, asyncState);
        }
        
        private object[] OnEndChangeRunMonitorGroup(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).EndChangeRunMonitorGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeRunMonitorGroupCompleted(object state) {
            if ((this.ChangeRunMonitorGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeRunMonitorGroupCompleted(this, new ChangeRunMonitorGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeRunMonitorGroupAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> groupModel, string userID) {
            this.ChangeRunMonitorGroupAsync(groupModel, userID, null);
        }
        
        public void ChangeRunMonitorGroupAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> groupModel, string userID, object userState) {
            if ((this.onBeginChangeRunMonitorGroupDelegate == null)) {
                this.onBeginChangeRunMonitorGroupDelegate = new BeginOperationDelegate(this.OnBeginChangeRunMonitorGroup);
            }
            if ((this.onEndChangeRunMonitorGroupDelegate == null)) {
                this.onEndChangeRunMonitorGroupDelegate = new EndOperationDelegate(this.OnEndChangeRunMonitorGroup);
            }
            if ((this.onChangeRunMonitorGroupCompletedDelegate == null)) {
                this.onChangeRunMonitorGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeRunMonitorGroupCompleted);
            }
            base.InvokeAsync(this.onBeginChangeRunMonitorGroupDelegate, new object[] {
                        groupModel,
                        userID}, this.onEndChangeRunMonitorGroupDelegate, this.onChangeRunMonitorGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.BeginDeleteRunMonitorGroupByID(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRunMonitorGroupByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.EndDeleteRunMonitorGroupByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteRunMonitorGroupByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRunMonitorGroupByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).BeginDeleteRunMonitorGroupByID(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteRunMonitorGroupByID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).EndDeleteRunMonitorGroupByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteRunMonitorGroupByIDCompleted(object state) {
            if ((this.DeleteRunMonitorGroupByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRunMonitorGroupByIDCompleted(this, new DeleteRunMonitorGroupByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRunMonitorGroupByIDAsync(string ID) {
            this.DeleteRunMonitorGroupByIDAsync(ID, null);
        }
        
        public void DeleteRunMonitorGroupByIDAsync(string ID, object userState) {
            if ((this.onBeginDeleteRunMonitorGroupByIDDelegate == null)) {
                this.onBeginDeleteRunMonitorGroupByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteRunMonitorGroupByID);
            }
            if ((this.onEndDeleteRunMonitorGroupByIDDelegate == null)) {
                this.onEndDeleteRunMonitorGroupByIDDelegate = new EndOperationDelegate(this.OnEndDeleteRunMonitorGroupByID);
            }
            if ((this.onDeleteRunMonitorGroupByIDCompletedDelegate == null)) {
                this.onDeleteRunMonitorGroupByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRunMonitorGroupByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRunMonitorGroupByIDDelegate, new object[] {
                        ID}, this.onEndDeleteRunMonitorGroupByIDDelegate, this.onDeleteRunMonitorGroupByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.BeginGetRunMonitorGroupList(int pageIndex, int pageSize, string groupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRunMonitorGroupList(pageIndex, pageSize, groupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1 Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.EndGetRunMonitorGroupList(System.IAsyncResult result) {
            return base.Channel.EndGetRunMonitorGroupList(result);
        }
        
        private System.IAsyncResult OnBeginGetRunMonitorGroupList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            int pageSize = ((int)(inValues[1]));
            string groupId = ((string)(inValues[2]));
            return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).BeginGetRunMonitorGroupList(pageIndex, pageSize, groupId, callback, asyncState);
        }
        
        private object[] OnEndGetRunMonitorGroupList(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1 retVal = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).EndGetRunMonitorGroupList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunMonitorGroupListCompleted(object state) {
            if ((this.GetRunMonitorGroupListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunMonitorGroupListCompleted(this, new GetRunMonitorGroupListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunMonitorGroupListAsync(int pageIndex, int pageSize, string groupId) {
            this.GetRunMonitorGroupListAsync(pageIndex, pageSize, groupId, null);
        }
        
        public void GetRunMonitorGroupListAsync(int pageIndex, int pageSize, string groupId, object userState) {
            if ((this.onBeginGetRunMonitorGroupListDelegate == null)) {
                this.onBeginGetRunMonitorGroupListDelegate = new BeginOperationDelegate(this.OnBeginGetRunMonitorGroupList);
            }
            if ((this.onEndGetRunMonitorGroupListDelegate == null)) {
                this.onEndGetRunMonitorGroupListDelegate = new EndOperationDelegate(this.OnEndGetRunMonitorGroupList);
            }
            if ((this.onGetRunMonitorGroupListCompletedDelegate == null)) {
                this.onGetRunMonitorGroupListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunMonitorGroupListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunMonitorGroupListDelegate, new object[] {
                        pageIndex,
                        pageSize,
                        groupId}, this.onEndGetRunMonitorGroupListDelegate, this.onGetRunMonitorGroupListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.BeginChangeRunMonitorGroupVehicle(string carNo, string groupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeRunMonitorGroupVehicle(carNo, groupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.EndChangeRunMonitorGroupVehicle(System.IAsyncResult result) {
            return base.Channel.EndChangeRunMonitorGroupVehicle(result);
        }
        
        private System.IAsyncResult OnBeginChangeRunMonitorGroupVehicle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string carNo = ((string)(inValues[0]));
            string groupId = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).BeginChangeRunMonitorGroupVehicle(carNo, groupId, callback, asyncState);
        }
        
        private object[] OnEndChangeRunMonitorGroupVehicle(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).EndChangeRunMonitorGroupVehicle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeRunMonitorGroupVehicleCompleted(object state) {
            if ((this.ChangeRunMonitorGroupVehicleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeRunMonitorGroupVehicleCompleted(this, new ChangeRunMonitorGroupVehicleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeRunMonitorGroupVehicleAsync(string carNo, string groupId) {
            this.ChangeRunMonitorGroupVehicleAsync(carNo, groupId, null);
        }
        
        public void ChangeRunMonitorGroupVehicleAsync(string carNo, string groupId, object userState) {
            if ((this.onBeginChangeRunMonitorGroupVehicleDelegate == null)) {
                this.onBeginChangeRunMonitorGroupVehicleDelegate = new BeginOperationDelegate(this.OnBeginChangeRunMonitorGroupVehicle);
            }
            if ((this.onEndChangeRunMonitorGroupVehicleDelegate == null)) {
                this.onEndChangeRunMonitorGroupVehicleDelegate = new EndOperationDelegate(this.OnEndChangeRunMonitorGroupVehicle);
            }
            if ((this.onChangeRunMonitorGroupVehicleCompletedDelegate == null)) {
                this.onChangeRunMonitorGroupVehicleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeRunMonitorGroupVehicleCompleted);
            }
            base.InvokeAsync(this.onBeginChangeRunMonitorGroupVehicleDelegate, new object[] {
                        carNo,
                        groupId}, this.onEndChangeRunMonitorGroupVehicleDelegate, this.onChangeRunMonitorGroupVehicleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.BeginDeleteRunMonitorGroupVehicleByID(string ID, string userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRunMonitorGroupVehicleByID(ID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.EndDeleteRunMonitorGroupVehicleByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteRunMonitorGroupVehicleByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRunMonitorGroupVehicleByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            string userID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).BeginDeleteRunMonitorGroupVehicleByID(ID, userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteRunMonitorGroupVehicleByID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).EndDeleteRunMonitorGroupVehicleByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteRunMonitorGroupVehicleByIDCompleted(object state) {
            if ((this.DeleteRunMonitorGroupVehicleByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRunMonitorGroupVehicleByIDCompleted(this, new DeleteRunMonitorGroupVehicleByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRunMonitorGroupVehicleByIDAsync(string ID, string userID) {
            this.DeleteRunMonitorGroupVehicleByIDAsync(ID, userID, null);
        }
        
        public void DeleteRunMonitorGroupVehicleByIDAsync(string ID, string userID, object userState) {
            if ((this.onBeginDeleteRunMonitorGroupVehicleByIDDelegate == null)) {
                this.onBeginDeleteRunMonitorGroupVehicleByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteRunMonitorGroupVehicleByID);
            }
            if ((this.onEndDeleteRunMonitorGroupVehicleByIDDelegate == null)) {
                this.onEndDeleteRunMonitorGroupVehicleByIDDelegate = new EndOperationDelegate(this.OnEndDeleteRunMonitorGroupVehicleByID);
            }
            if ((this.onDeleteRunMonitorGroupVehicleByIDCompletedDelegate == null)) {
                this.onDeleteRunMonitorGroupVehicleByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRunMonitorGroupVehicleByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRunMonitorGroupVehicleByIDDelegate, new object[] {
                        ID,
                        userID}, this.onEndDeleteRunMonitorGroupVehicleByIDDelegate, this.onDeleteRunMonitorGroupVehicleByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.BeginGetRunMonitorGroupVehicleList(int pageIndex, int pageSize, string userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRunMonitorGroupVehicleList(pageIndex, pageSize, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1 Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService.EndGetRunMonitorGroupVehicleList(System.IAsyncResult result) {
            return base.Channel.EndGetRunMonitorGroupVehicleList(result);
        }
        
        private System.IAsyncResult OnBeginGetRunMonitorGroupVehicleList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            int pageSize = ((int)(inValues[1]));
            string userID = ((string)(inValues[2]));
            return ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).BeginGetRunMonitorGroupVehicleList(pageIndex, pageSize, userID, callback, asyncState);
        }
        
        private object[] OnEndGetRunMonitorGroupVehicleList(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1 retVal = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService)(this)).EndGetRunMonitorGroupVehicleList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunMonitorGroupVehicleListCompleted(object state) {
            if ((this.GetRunMonitorGroupVehicleListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunMonitorGroupVehicleListCompleted(this, new GetRunMonitorGroupVehicleListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunMonitorGroupVehicleListAsync(int pageIndex, int pageSize, string userID) {
            this.GetRunMonitorGroupVehicleListAsync(pageIndex, pageSize, userID, null);
        }
        
        public void GetRunMonitorGroupVehicleListAsync(int pageIndex, int pageSize, string userID, object userState) {
            if ((this.onBeginGetRunMonitorGroupVehicleListDelegate == null)) {
                this.onBeginGetRunMonitorGroupVehicleListDelegate = new BeginOperationDelegate(this.OnBeginGetRunMonitorGroupVehicleList);
            }
            if ((this.onEndGetRunMonitorGroupVehicleListDelegate == null)) {
                this.onEndGetRunMonitorGroupVehicleListDelegate = new EndOperationDelegate(this.OnEndGetRunMonitorGroupVehicleList);
            }
            if ((this.onGetRunMonitorGroupVehicleListCompletedDelegate == null)) {
                this.onGetRunMonitorGroupVehicleListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunMonitorGroupVehicleListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunMonitorGroupVehicleListDelegate, new object[] {
                        pageIndex,
                        pageSize,
                        userID}, this.onEndGetRunMonitorGroupVehicleListDelegate, this.onGetRunMonitorGroupVehicleListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService CreateChannel() {
            return new RunMonitorGroupServiceClientChannel(this);
        }
        
        private class RunMonitorGroupServiceClientChannel : ChannelBase<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService>, Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService {
            
            public RunMonitorGroupServiceClientChannel(System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.IRunMonitorGroupService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginChangeRunMonitorGroup(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.RunMonitorGroupService.RunMonitorGroup> groupModel, string userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = groupModel;
                _args[1] = userID;
                System.IAsyncResult _result = base.BeginInvoke("ChangeRunMonitorGroup", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndChangeRunMonitorGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(base.EndInvoke("ChangeRunMonitorGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRunMonitorGroupByID(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRunMonitorGroupByID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndDeleteRunMonitorGroupByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(base.EndInvoke("DeleteRunMonitorGroupByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunMonitorGroupList(int pageIndex, int pageSize, string groupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = pageIndex;
                _args[1] = pageSize;
                _args[2] = groupId;
                System.IAsyncResult _result = base.BeginInvoke("GetRunMonitorGroupList", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1 EndGetRunMonitorGroupList(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1 _result = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupdrfzYGI1)(base.EndInvoke("GetRunMonitorGroupList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeRunMonitorGroupVehicle(string carNo, string groupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = carNo;
                _args[1] = groupId;
                System.IAsyncResult _result = base.BeginInvoke("ChangeRunMonitorGroupVehicle", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndChangeRunMonitorGroupVehicle(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(base.EndInvoke("ChangeRunMonitorGroupVehicle", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRunMonitorGroupVehicleByID(string ID, string userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ID;
                _args[1] = userID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRunMonitorGroupVehicleByID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean EndDeleteRunMonitorGroupVehicleByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.SingleMessageOfboolean)(base.EndInvoke("DeleteRunMonitorGroupVehicleByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunMonitorGroupVehicleList(int pageIndex, int pageSize, string userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = pageIndex;
                _args[1] = pageSize;
                _args[2] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetRunMonitorGroupVehicleList", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1 EndGetRunMonitorGroupVehicleList(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1 _result = ((Gsafety.PTMS.ServiceReference.RunMonitorGroupService.MultiMessageOfRunMonitorGroupVehicledrfzYGI1)(base.EndInvoke("GetRunMonitorGroupVehicleList", _args, result)));
                return _result;
            }
        }
    }
}
