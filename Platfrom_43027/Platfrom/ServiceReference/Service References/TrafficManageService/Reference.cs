//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Gsafety.PTMS.ServiceReference.TrafficManageService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafficFence", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Common.Data")]
    public partial class TrafficFence : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AddressField;
        
        private string CircleCenterField;
        
        private string ClientIDField;
        
        private System.DateTime CreateTimeField;
        
        private string CreatorField;
        
        private string EndTimeField;
        
        private decimal FenceTypeField;
        
        private string IDField;
        
        private int MaxSpeedField;
        
        private string NameField;
        
        private int OverSpeedDurationField;
        
        private int PointCountField;
        
        private string PtsField;
        
        private int RadiusField;
        
        private string RegionPropertyField;
        
        private string ShapeField;
        
        private string StartTimeField;
        
        private bool ValidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CircleCenter {
            get {
                return this.CircleCenterField;
            }
            set {
                if ((object.ReferenceEquals(this.CircleCenterField, value) != true)) {
                    this.CircleCenterField = value;
                    this.RaisePropertyChanged("CircleCenter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIDField, value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FenceType {
            get {
                return this.FenceTypeField;
            }
            set {
                if ((this.FenceTypeField.Equals(value) != true)) {
                    this.FenceTypeField = value;
                    this.RaisePropertyChanged("FenceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OverSpeedDuration {
            get {
                return this.OverSpeedDurationField;
            }
            set {
                if ((this.OverSpeedDurationField.Equals(value) != true)) {
                    this.OverSpeedDurationField = value;
                    this.RaisePropertyChanged("OverSpeedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointCount {
            get {
                return this.PointCountField;
            }
            set {
                if ((this.PointCountField.Equals(value) != true)) {
                    this.PointCountField = value;
                    this.RaisePropertyChanged("PointCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pts {
            get {
                return this.PtsField;
            }
            set {
                if ((object.ReferenceEquals(this.PtsField, value) != true)) {
                    this.PtsField = value;
                    this.RaisePropertyChanged("Pts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegionProperty {
            get {
                return this.RegionPropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionPropertyField, value) != true)) {
                    this.RegionPropertyField = value;
                    this.RaisePropertyChanged("RegionProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Shape {
            get {
                return this.ShapeField;
            }
            set {
                if ((object.ReferenceEquals(this.ShapeField, value) != true)) {
                    this.ShapeField = value;
                    this.RaisePropertyChanged("Shape");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Valid {
            get {
                return this.ValidField;
            }
            set {
                if ((this.ValidField.Equals(value) != true)) {
                    this.ValidField = value;
                    this.RaisePropertyChanged("Valid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleMessageOfboolean", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class SingleMessageOfboolean : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private bool ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleMessageOfTrafficFencei7Zg_POJ5", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class SingleMessageOfTrafficFencei7Zg_POJ5 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfTrafficFencei7Zg_POJ5", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfTrafficFencei7Zg_POJ5 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FenceQueue", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Common.Data")]
    public partial class FenceQueue : object, System.ComponentModel.INotifyPropertyChanged {
        
        private short AlertTypeField;
        
        private string CircleCenterField;
        
        private string ClientIDField;
        
        private System.DateTime CreateTimeField;
        
        private string EndTimeField;
        
        private string FenceIDField;
        
        private int FenceTypeField;
        
        private string IDField;
        
        private int MaxSpeedField;
        
        private string MdvrCoreSnField;
        
        private string NameField;
        
        private int OperTypeField;
        
        private int OverSpeedDurationField;
        
        private decimal PacketSeqField;
        
        private int PointCountField;
        
        private string PtsField;
        
        private int RadiusField;
        
        private string RegionPropertyField;
        
        private string ResultPacketField;
        
        private System.Nullable<System.DateTime> SendTimeField;
        
        private string StartTimeField;
        
        private int StatusField;
        
        private string VehicleIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short AlertType {
            get {
                return this.AlertTypeField;
            }
            set {
                if ((this.AlertTypeField.Equals(value) != true)) {
                    this.AlertTypeField = value;
                    this.RaisePropertyChanged("AlertType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CircleCenter {
            get {
                return this.CircleCenterField;
            }
            set {
                if ((object.ReferenceEquals(this.CircleCenterField, value) != true)) {
                    this.CircleCenterField = value;
                    this.RaisePropertyChanged("CircleCenter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIDField, value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FenceID {
            get {
                return this.FenceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FenceIDField, value) != true)) {
                    this.FenceIDField = value;
                    this.RaisePropertyChanged("FenceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FenceType {
            get {
                return this.FenceTypeField;
            }
            set {
                if ((this.FenceTypeField.Equals(value) != true)) {
                    this.FenceTypeField = value;
                    this.RaisePropertyChanged("FenceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MdvrCoreSn {
            get {
                return this.MdvrCoreSnField;
            }
            set {
                if ((object.ReferenceEquals(this.MdvrCoreSnField, value) != true)) {
                    this.MdvrCoreSnField = value;
                    this.RaisePropertyChanged("MdvrCoreSn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperType {
            get {
                return this.OperTypeField;
            }
            set {
                if ((this.OperTypeField.Equals(value) != true)) {
                    this.OperTypeField = value;
                    this.RaisePropertyChanged("OperType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OverSpeedDuration {
            get {
                return this.OverSpeedDurationField;
            }
            set {
                if ((this.OverSpeedDurationField.Equals(value) != true)) {
                    this.OverSpeedDurationField = value;
                    this.RaisePropertyChanged("OverSpeedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PacketSeq {
            get {
                return this.PacketSeqField;
            }
            set {
                if ((this.PacketSeqField.Equals(value) != true)) {
                    this.PacketSeqField = value;
                    this.RaisePropertyChanged("PacketSeq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointCount {
            get {
                return this.PointCountField;
            }
            set {
                if ((this.PointCountField.Equals(value) != true)) {
                    this.PointCountField = value;
                    this.RaisePropertyChanged("PointCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pts {
            get {
                return this.PtsField;
            }
            set {
                if ((object.ReferenceEquals(this.PtsField, value) != true)) {
                    this.PtsField = value;
                    this.RaisePropertyChanged("Pts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegionProperty {
            get {
                return this.RegionPropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionPropertyField, value) != true)) {
                    this.RegionPropertyField = value;
                    this.RaisePropertyChanged("RegionProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultPacket {
            get {
                return this.ResultPacketField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultPacketField, value) != true)) {
                    this.ResultPacketField = value;
                    this.RaisePropertyChanged("ResultPacket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SendTime {
            get {
                return this.SendTimeField;
            }
            set {
                if ((this.SendTimeField.Equals(value) != true)) {
                    this.SendTimeField = value;
                    this.RaisePropertyChanged("SendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleID {
            get {
                return this.VehicleIDField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleIDField, value) != true)) {
                    this.VehicleIDField = value;
                    this.RaisePropertyChanged("VehicleID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfFenceQueuei7Zg_POJ5", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfFenceQueuei7Zg_POJ5 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafficRoute", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Common.Data")]
    public partial class TrafficRoute : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ClientIDField;
        
        private System.DateTime CreateTimeField;
        
        private string CreatorField;
        
        private string EndTimeField;
        
        private string IDField;
        
        private int MaxSpeedField;
        
        private string NameField;
        
        private int OverSpeedDurationField;
        
        private int PointCountField;
        
        private string PtsField;
        
        private string RoutePropertyField;
        
        private string RouteSegmentPropertyField;
        
        private string StartTimeField;
        
        private int TurningCountField;
        
        private bool ValidField;
        
        private int WidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIDField, value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OverSpeedDuration {
            get {
                return this.OverSpeedDurationField;
            }
            set {
                if ((this.OverSpeedDurationField.Equals(value) != true)) {
                    this.OverSpeedDurationField = value;
                    this.RaisePropertyChanged("OverSpeedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointCount {
            get {
                return this.PointCountField;
            }
            set {
                if ((this.PointCountField.Equals(value) != true)) {
                    this.PointCountField = value;
                    this.RaisePropertyChanged("PointCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pts {
            get {
                return this.PtsField;
            }
            set {
                if ((object.ReferenceEquals(this.PtsField, value) != true)) {
                    this.PtsField = value;
                    this.RaisePropertyChanged("Pts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteProperty {
            get {
                return this.RoutePropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.RoutePropertyField, value) != true)) {
                    this.RoutePropertyField = value;
                    this.RaisePropertyChanged("RouteProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteSegmentProperty {
            get {
                return this.RouteSegmentPropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteSegmentPropertyField, value) != true)) {
                    this.RouteSegmentPropertyField = value;
                    this.RaisePropertyChanged("RouteSegmentProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TurningCount {
            get {
                return this.TurningCountField;
            }
            set {
                if ((this.TurningCountField.Equals(value) != true)) {
                    this.TurningCountField = value;
                    this.RaisePropertyChanged("TurningCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Valid {
            get {
                return this.ValidField;
            }
            set {
                if ((this.ValidField.Equals(value) != true)) {
                    this.ValidField = value;
                    this.RaisePropertyChanged("Valid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleMessageOfTrafficRoutei7Zg_POJ5", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class SingleMessageOfTrafficRoutei7Zg_POJ5 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfTrafficRoutei7Zg_POJ5", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfTrafficRoutei7Zg_POJ5 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RouteQueue", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Common.Data")]
    public partial class RouteQueue : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ClientIDField;
        
        private System.DateTime CreateTimeField;
        
        private string EndTimeField;
        
        private string IDField;
        
        private decimal MaxSpeedField;
        
        private string MdvrCoreSnField;
        
        private string NameField;
        
        private decimal OperTypeField;
        
        private decimal OverSpeedDurationField;
        
        private decimal PacketSeqField;
        
        private decimal PointCountField;
        
        private string PtsField;
        
        private decimal RegionIDField;
        
        private string ResultPacketField;
        
        private string RouteIDField;
        
        private string RoutePropertyField;
        
        private string RouteSegmentPropertyField;
        
        private System.Nullable<System.DateTime> SendTimeField;
        
        private string StartTimeField;
        
        private decimal StatusField;
        
        private string VehicleIDField;
        
        private decimal WidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIDField, value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MdvrCoreSn {
            get {
                return this.MdvrCoreSnField;
            }
            set {
                if ((object.ReferenceEquals(this.MdvrCoreSnField, value) != true)) {
                    this.MdvrCoreSnField = value;
                    this.RaisePropertyChanged("MdvrCoreSn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OperType {
            get {
                return this.OperTypeField;
            }
            set {
                if ((this.OperTypeField.Equals(value) != true)) {
                    this.OperTypeField = value;
                    this.RaisePropertyChanged("OperType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OverSpeedDuration {
            get {
                return this.OverSpeedDurationField;
            }
            set {
                if ((this.OverSpeedDurationField.Equals(value) != true)) {
                    this.OverSpeedDurationField = value;
                    this.RaisePropertyChanged("OverSpeedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PacketSeq {
            get {
                return this.PacketSeqField;
            }
            set {
                if ((this.PacketSeqField.Equals(value) != true)) {
                    this.PacketSeqField = value;
                    this.RaisePropertyChanged("PacketSeq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PointCount {
            get {
                return this.PointCountField;
            }
            set {
                if ((this.PointCountField.Equals(value) != true)) {
                    this.PointCountField = value;
                    this.RaisePropertyChanged("PointCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pts {
            get {
                return this.PtsField;
            }
            set {
                if ((object.ReferenceEquals(this.PtsField, value) != true)) {
                    this.PtsField = value;
                    this.RaisePropertyChanged("Pts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal RegionID {
            get {
                return this.RegionIDField;
            }
            set {
                if ((this.RegionIDField.Equals(value) != true)) {
                    this.RegionIDField = value;
                    this.RaisePropertyChanged("RegionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultPacket {
            get {
                return this.ResultPacketField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultPacketField, value) != true)) {
                    this.ResultPacketField = value;
                    this.RaisePropertyChanged("ResultPacket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteID {
            get {
                return this.RouteIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteIDField, value) != true)) {
                    this.RouteIDField = value;
                    this.RaisePropertyChanged("RouteID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteProperty {
            get {
                return this.RoutePropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.RoutePropertyField, value) != true)) {
                    this.RoutePropertyField = value;
                    this.RaisePropertyChanged("RouteProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteSegmentProperty {
            get {
                return this.RouteSegmentPropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteSegmentPropertyField, value) != true)) {
                    this.RouteSegmentPropertyField = value;
                    this.RaisePropertyChanged("RouteSegmentProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SendTime {
            get {
                return this.SendTimeField;
            }
            set {
                if ((this.SendTimeField.Equals(value) != true)) {
                    this.SendTimeField = value;
                    this.RaisePropertyChanged("SendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleID {
            get {
                return this.VehicleIDField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleIDField, value) != true)) {
                    this.VehicleIDField = value;
                    this.RaisePropertyChanged("VehicleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfRouteQueuei7Zg_POJ5", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfRouteQueuei7Zg_POJ5 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiMessageOfVehicle8UxEljkQ", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Base.Contract.Data")]
    public partial class MultiMessageOfVehicle8UxEljkQ : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorDetailMsgField;
        
        private string ErrorMsgField;
        
        private System.Exception ExceptionMessageField;
        
        private bool IsSuccessField;
        
        private System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.Vehicle> ResultField;
        
        private int TotalRecordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetailMsg {
            get {
                return this.ErrorDetailMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailMsgField, value) != true)) {
                    this.ErrorDetailMsgField = value;
                    this.RaisePropertyChanged("ErrorDetailMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionMessage {
            get {
                return this.ExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionMessageField, value) != true)) {
                    this.ExceptionMessageField = value;
                    this.RaisePropertyChanged("ExceptionMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.Vehicle> Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecord {
            get {
                return this.TotalRecordField;
            }
            set {
                if ((this.TotalRecordField.Equals(value) != true)) {
                    this.TotalRecordField = value;
                    this.RaisePropertyChanged("TotalRecord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/Gsafety.PTMS.Traffic.Contract")]
    public partial class Vehicle : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CompanyField;
        
        private string MDVR_CODE_SNField;
        
        private string Vehicle_IDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MDVR_CODE_SN {
            get {
                return this.MDVR_CODE_SNField;
            }
            set {
                if ((object.ReferenceEquals(this.MDVR_CODE_SNField, value) != true)) {
                    this.MDVR_CODE_SNField = value;
                    this.RaisePropertyChanged("MDVR_CODE_SN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Vehicle_ID {
            get {
                return this.Vehicle_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Vehicle_IDField, value) != true)) {
                    this.Vehicle_IDField = value;
                    this.RaisePropertyChanged("Vehicle_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrafficManageService.ITrafficManageService")]
    public interface ITrafficManageService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/InsertTrafficFence", ReplyAction="http://tempuri.org/ITrafficFence/InsertTrafficFenceResponse")]
        System.IAsyncResult BeginInsertTrafficFence(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertTrafficFence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/UpdateTrafficFence", ReplyAction="http://tempuri.org/ITrafficFence/UpdateTrafficFenceResponse")]
        System.IAsyncResult BeginUpdateTrafficFence(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndUpdateTrafficFence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/DeleteTrafficFenceByID", ReplyAction="http://tempuri.org/ITrafficFence/DeleteTrafficFenceByIDResponse")]
        System.IAsyncResult BeginDeleteTrafficFenceByID(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteTrafficFenceByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/GetTrafficFence", ReplyAction="http://tempuri.org/ITrafficFence/GetTrafficFenceResponse")]
        System.IAsyncResult BeginGetTrafficFence(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5 EndGetTrafficFence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/IsTrafficExists", ReplyAction="http://tempuri.org/ITrafficFence/IsTrafficExistsResponse")]
        System.IAsyncResult BeginIsTrafficExists(string fenceName, string clientID, string fenceID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsTrafficExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/GetDeliveredTrafficFenceListByVehicleID", ReplyAction="http://tempuri.org/ITrafficFence/GetDeliveredTrafficFenceListByVehicleIDResponse")]
        System.IAsyncResult BeginGetDeliveredTrafficFenceListByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 EndGetDeliveredTrafficFenceListByVehicleID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/GetTrafficFenceListOnVehicleByVehicleID", ReplyAction="http://tempuri.org/ITrafficFence/GetTrafficFenceListOnVehicleByVehicleIDResponse")]
        System.IAsyncResult BeginGetTrafficFenceListOnVehicleByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 EndGetTrafficFenceListOnVehicleByVehicleID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/GetTrafficFenceListByVehicleIDAndFenceName", ReplyAction="http://tempuri.org/ITrafficFence/GetTrafficFenceListByVehicleIDAndFenceNameRespon" +
            "se")]
        System.IAsyncResult BeginGetTrafficFenceListByVehicleIDAndFenceName(string fenceName, string vehicleID, string clientID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 EndGetTrafficFenceListByVehicleIDAndFenceName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/InsertFenceQueue", ReplyAction="http://tempuri.org/ITrafficFence/InsertFenceQueueResponse")]
        System.IAsyncResult BeginInsertFenceQueue(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> fencequeues, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertFenceQueue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/DeleteFenceQueueByID", ReplyAction="http://tempuri.org/ITrafficFence/DeleteFenceQueueByIDResponse")]
        System.IAsyncResult BeginDeleteFenceQueueByID(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteFenceQueueByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/ObsoleteFence", ReplyAction="http://tempuri.org/ITrafficFence/ObsoleteFenceResponse")]
        System.IAsyncResult BeginObsoleteFence(string fenceID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndObsoleteFence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/IsFenceDelivered", ReplyAction="http://tempuri.org/ITrafficFence/IsFenceDeliveredResponse")]
        System.IAsyncResult BeginIsFenceDelivered(string fenceID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsFenceDelivered(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/GetAllFenceQueueListByFenceID", ReplyAction="http://tempuri.org/ITrafficFence/GetAllFenceQueueListByFenceIDResponse")]
        System.IAsyncResult BeginGetAllFenceQueueListByFenceID(string clientID, string fenceID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 EndGetAllFenceQueueListByFenceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/GetFenceQueueListByFenceID", ReplyAction="http://tempuri.org/ITrafficFence/GetFenceQueueListByFenceIDResponse")]
        System.IAsyncResult BeginGetFenceQueueListByFenceID(string fenceID, string clientID, string vehicleName, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 EndGetFenceQueueListByFenceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficFence/DeliverFenceQueueToVehicle", ReplyAction="http://tempuri.org/ITrafficFence/DeliverFenceQueueToVehicleResponse")]
        System.IAsyncResult BeginDeliverFenceQueueToVehicle(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> vehicles, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeliverFenceQueueToVehicle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/InsertTrafficRoute", ReplyAction="http://tempuri.org/ITrafficRoute/InsertTrafficRouteResponse")]
        System.IAsyncResult BeginInsertTrafficRoute(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertTrafficRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/UpdateTrafficRoute", ReplyAction="http://tempuri.org/ITrafficRoute/UpdateTrafficRouteResponse")]
        System.IAsyncResult BeginUpdateTrafficRoute(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndUpdateTrafficRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/DeleteTrafficRouteByID", ReplyAction="http://tempuri.org/ITrafficRoute/DeleteTrafficRouteByIDResponse")]
        System.IAsyncResult BeginDeleteTrafficRouteByID(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteTrafficRouteByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/GetTrafficRoute", ReplyAction="http://tempuri.org/ITrafficRoute/GetTrafficRouteResponse")]
        System.IAsyncResult BeginGetTrafficRoute(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5 EndGetTrafficRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/IsRouteExists", ReplyAction="http://tempuri.org/ITrafficRoute/IsRouteExistsResponse")]
        System.IAsyncResult BeginIsRouteExists(string routeName, string clientID, string routeID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsRouteExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/GetTrafficRouteListByVehicleIDAndRouteName", ReplyAction="http://tempuri.org/ITrafficRoute/GetTrafficRouteListByVehicleIDAndRouteNameRespon" +
            "se")]
        System.IAsyncResult BeginGetTrafficRouteListByVehicleIDAndRouteName(string routeName, string vehicleID, string clientID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 EndGetTrafficRouteListByVehicleIDAndRouteName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/ObsoleteTrafficeRoute", ReplyAction="http://tempuri.org/ITrafficRoute/ObsoleteTrafficeRouteResponse")]
        System.IAsyncResult BeginObsoleteTrafficeRoute(string routeID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndObsoleteTrafficeRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/IsRouteDelivered", ReplyAction="http://tempuri.org/ITrafficRoute/IsRouteDeliveredResponse")]
        System.IAsyncResult BeginIsRouteDelivered(string routeID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsRouteDelivered(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/GetDeliveredTrafficRouteListByVehicleID", ReplyAction="http://tempuri.org/ITrafficRoute/GetDeliveredTrafficRouteListByVehicleIDResponse")]
        System.IAsyncResult BeginGetDeliveredTrafficRouteListByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 EndGetDeliveredTrafficRouteListByVehicleID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/InsertRouteQueue", ReplyAction="http://tempuri.org/ITrafficRoute/InsertRouteQueueResponse")]
        System.IAsyncResult BeginInsertRouteQueue(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> routequeues, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertRouteQueue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/DeleteRouteQueueByID", ReplyAction="http://tempuri.org/ITrafficRoute/DeleteRouteQueueByIDResponse")]
        System.IAsyncResult BeginDeleteRouteQueueByID(string ID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteRouteQueueByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/GetRouteQueueByRouteID", ReplyAction="http://tempuri.org/ITrafficRoute/GetRouteQueueByRouteIDResponse")]
        System.IAsyncResult BeginGetRouteQueueByRouteID(string clientID, string routeID, string vehicleName, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 EndGetRouteQueueByRouteID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/GetAllRouteQueueByRouteID", ReplyAction="http://tempuri.org/ITrafficRoute/GetAllRouteQueueByRouteIDResponse")]
        System.IAsyncResult BeginGetAllRouteQueueByRouteID(string clientID, string routeID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 EndGetAllRouteQueueByRouteID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/DeliverRouteQueueToVehicle", ReplyAction="http://tempuri.org/ITrafficRoute/DeliverRouteQueueToVehicleResponse")]
        System.IAsyncResult BeginDeliverRouteQueueToVehicle(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> vehicles, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeliverRouteQueueToVehicle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficRoute/GetTrafficRouteListOnVehicleByVehicleID", ReplyAction="http://tempuri.org/ITrafficRoute/GetTrafficRouteListOnVehicleByVehicleIDResponse")]
        System.IAsyncResult BeginGetTrafficRouteListOnVehicleByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 EndGetTrafficRouteListOnVehicleByVehicleID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficManageService/CheckFenceNameExist", ReplyAction="http://tempuri.org/ITrafficManageService/CheckFenceNameExistResponse")]
        System.IAsyncResult BeginCheckFenceNameExist(string strFenceName, short nType, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndCheckFenceNameExist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficManageService/DeleteCarFenceByFenceID", ReplyAction="http://tempuri.org/ITrafficManageService/DeleteCarFenceByFenceIDResponse")]
        System.IAsyncResult BeginDeleteCarFenceByFenceID(string fenceID, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteCarFenceByFenceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficManageService/GetVehicleByFence", ReplyAction="http://tempuri.org/ITrafficManageService/GetVehicleByFenceResponse")]
        System.IAsyncResult BeginGetVehicleByFence(string fenceID, short nState, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ EndGetVehicleByFence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficManageService/CheckSpeedLimitidNameExist", ReplyAction="http://tempuri.org/ITrafficManageService/CheckSpeedLimitidNameExistResponse")]
        System.IAsyncResult BeginCheckSpeedLimitidNameExist(string strSpeedName, string id, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndCheckSpeedLimitidNameExist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficManageService/CheckSpeedLimitNameExist", ReplyAction="http://tempuri.org/ITrafficManageService/CheckSpeedLimitNameExistResponse")]
        System.IAsyncResult BeginCheckSpeedLimitNameExist(string strSpeedName, System.AsyncCallback callback, object asyncState);
        
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndCheckSpeedLimitNameExist(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrafficManageServiceChannel : Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertTrafficFenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertTrafficFenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTrafficFenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTrafficFenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteTrafficFenceByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteTrafficFenceByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrafficFenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrafficFenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsTrafficExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsTrafficExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeliveredTrafficFenceListByVehicleIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeliveredTrafficFenceListByVehicleIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrafficFenceListOnVehicleByVehicleIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrafficFenceListOnVehicleByVehicleIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrafficFenceListByVehicleIDAndFenceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrafficFenceListByVehicleIDAndFenceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertFenceQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertFenceQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFenceQueueByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFenceQueueByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObsoleteFenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ObsoleteFenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsFenceDeliveredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsFenceDeliveredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllFenceQueueListByFenceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllFenceQueueListByFenceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFenceQueueListByFenceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFenceQueueListByFenceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeliverFenceQueueToVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeliverFenceQueueToVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertTrafficRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertTrafficRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTrafficRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTrafficRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteTrafficRouteByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteTrafficRouteByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrafficRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrafficRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsRouteExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsRouteExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrafficRouteListByVehicleIDAndRouteNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrafficRouteListByVehicleIDAndRouteNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObsoleteTrafficeRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ObsoleteTrafficeRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsRouteDeliveredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsRouteDeliveredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeliveredTrafficRouteListByVehicleIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeliveredTrafficRouteListByVehicleIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertRouteQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertRouteQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteRouteQueueByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteRouteQueueByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRouteQueueByRouteIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRouteQueueByRouteIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllRouteQueueByRouteIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllRouteQueueByRouteIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeliverRouteQueueToVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeliverRouteQueueToVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrafficRouteListOnVehicleByVehicleIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrafficRouteListOnVehicleByVehicleIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckFenceNameExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckFenceNameExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCarFenceByFenceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCarFenceByFenceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVehicleByFenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVehicleByFenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckSpeedLimitidNameExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckSpeedLimitidNameExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckSpeedLimitNameExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckSpeedLimitNameExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrafficManageServiceClient : System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService>, Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService {
        
        private BeginOperationDelegate onBeginInsertTrafficFenceDelegate;
        
        private EndOperationDelegate onEndInsertTrafficFenceDelegate;
        
        private System.Threading.SendOrPostCallback onInsertTrafficFenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTrafficFenceDelegate;
        
        private EndOperationDelegate onEndUpdateTrafficFenceDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTrafficFenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTrafficFenceByIDDelegate;
        
        private EndOperationDelegate onEndDeleteTrafficFenceByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTrafficFenceByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrafficFenceDelegate;
        
        private EndOperationDelegate onEndGetTrafficFenceDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrafficFenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsTrafficExistsDelegate;
        
        private EndOperationDelegate onEndIsTrafficExistsDelegate;
        
        private System.Threading.SendOrPostCallback onIsTrafficExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeliveredTrafficFenceListByVehicleIDDelegate;
        
        private EndOperationDelegate onEndGetDeliveredTrafficFenceListByVehicleIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeliveredTrafficFenceListByVehicleIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrafficFenceListOnVehicleByVehicleIDDelegate;
        
        private EndOperationDelegate onEndGetTrafficFenceListOnVehicleByVehicleIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrafficFenceListOnVehicleByVehicleIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrafficFenceListByVehicleIDAndFenceNameDelegate;
        
        private EndOperationDelegate onEndGetTrafficFenceListByVehicleIDAndFenceNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrafficFenceListByVehicleIDAndFenceNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertFenceQueueDelegate;
        
        private EndOperationDelegate onEndInsertFenceQueueDelegate;
        
        private System.Threading.SendOrPostCallback onInsertFenceQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFenceQueueByIDDelegate;
        
        private EndOperationDelegate onEndDeleteFenceQueueByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFenceQueueByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginObsoleteFenceDelegate;
        
        private EndOperationDelegate onEndObsoleteFenceDelegate;
        
        private System.Threading.SendOrPostCallback onObsoleteFenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsFenceDeliveredDelegate;
        
        private EndOperationDelegate onEndIsFenceDeliveredDelegate;
        
        private System.Threading.SendOrPostCallback onIsFenceDeliveredCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllFenceQueueListByFenceIDDelegate;
        
        private EndOperationDelegate onEndGetAllFenceQueueListByFenceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllFenceQueueListByFenceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFenceQueueListByFenceIDDelegate;
        
        private EndOperationDelegate onEndGetFenceQueueListByFenceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetFenceQueueListByFenceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeliverFenceQueueToVehicleDelegate;
        
        private EndOperationDelegate onEndDeliverFenceQueueToVehicleDelegate;
        
        private System.Threading.SendOrPostCallback onDeliverFenceQueueToVehicleCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertTrafficRouteDelegate;
        
        private EndOperationDelegate onEndInsertTrafficRouteDelegate;
        
        private System.Threading.SendOrPostCallback onInsertTrafficRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTrafficRouteDelegate;
        
        private EndOperationDelegate onEndUpdateTrafficRouteDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTrafficRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTrafficRouteByIDDelegate;
        
        private EndOperationDelegate onEndDeleteTrafficRouteByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTrafficRouteByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrafficRouteDelegate;
        
        private EndOperationDelegate onEndGetTrafficRouteDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrafficRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsRouteExistsDelegate;
        
        private EndOperationDelegate onEndIsRouteExistsDelegate;
        
        private System.Threading.SendOrPostCallback onIsRouteExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrafficRouteListByVehicleIDAndRouteNameDelegate;
        
        private EndOperationDelegate onEndGetTrafficRouteListByVehicleIDAndRouteNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrafficRouteListByVehicleIDAndRouteNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginObsoleteTrafficeRouteDelegate;
        
        private EndOperationDelegate onEndObsoleteTrafficeRouteDelegate;
        
        private System.Threading.SendOrPostCallback onObsoleteTrafficeRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsRouteDeliveredDelegate;
        
        private EndOperationDelegate onEndIsRouteDeliveredDelegate;
        
        private System.Threading.SendOrPostCallback onIsRouteDeliveredCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeliveredTrafficRouteListByVehicleIDDelegate;
        
        private EndOperationDelegate onEndGetDeliveredTrafficRouteListByVehicleIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeliveredTrafficRouteListByVehicleIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertRouteQueueDelegate;
        
        private EndOperationDelegate onEndInsertRouteQueueDelegate;
        
        private System.Threading.SendOrPostCallback onInsertRouteQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRouteQueueByIDDelegate;
        
        private EndOperationDelegate onEndDeleteRouteQueueByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRouteQueueByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRouteQueueByRouteIDDelegate;
        
        private EndOperationDelegate onEndGetRouteQueueByRouteIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetRouteQueueByRouteIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllRouteQueueByRouteIDDelegate;
        
        private EndOperationDelegate onEndGetAllRouteQueueByRouteIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllRouteQueueByRouteIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeliverRouteQueueToVehicleDelegate;
        
        private EndOperationDelegate onEndDeliverRouteQueueToVehicleDelegate;
        
        private System.Threading.SendOrPostCallback onDeliverRouteQueueToVehicleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrafficRouteListOnVehicleByVehicleIDDelegate;
        
        private EndOperationDelegate onEndGetTrafficRouteListOnVehicleByVehicleIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrafficRouteListOnVehicleByVehicleIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckFenceNameExistDelegate;
        
        private EndOperationDelegate onEndCheckFenceNameExistDelegate;
        
        private System.Threading.SendOrPostCallback onCheckFenceNameExistCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCarFenceByFenceIDDelegate;
        
        private EndOperationDelegate onEndDeleteCarFenceByFenceIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCarFenceByFenceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVehicleByFenceDelegate;
        
        private EndOperationDelegate onEndGetVehicleByFenceDelegate;
        
        private System.Threading.SendOrPostCallback onGetVehicleByFenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckSpeedLimitidNameExistDelegate;
        
        private EndOperationDelegate onEndCheckSpeedLimitidNameExistDelegate;
        
        private System.Threading.SendOrPostCallback onCheckSpeedLimitidNameExistCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckSpeedLimitNameExistDelegate;
        
        private EndOperationDelegate onEndCheckSpeedLimitNameExistDelegate;
        
        private System.Threading.SendOrPostCallback onCheckSpeedLimitNameExistCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TrafficManageServiceClient() {
        }
        
        public TrafficManageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrafficManageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrafficManageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrafficManageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<InsertTrafficFenceCompletedEventArgs> InsertTrafficFenceCompleted;
        
        public event System.EventHandler<UpdateTrafficFenceCompletedEventArgs> UpdateTrafficFenceCompleted;
        
        public event System.EventHandler<DeleteTrafficFenceByIDCompletedEventArgs> DeleteTrafficFenceByIDCompleted;
        
        public event System.EventHandler<GetTrafficFenceCompletedEventArgs> GetTrafficFenceCompleted;
        
        public event System.EventHandler<IsTrafficExistsCompletedEventArgs> IsTrafficExistsCompleted;
        
        public event System.EventHandler<GetDeliveredTrafficFenceListByVehicleIDCompletedEventArgs> GetDeliveredTrafficFenceListByVehicleIDCompleted;
        
        public event System.EventHandler<GetTrafficFenceListOnVehicleByVehicleIDCompletedEventArgs> GetTrafficFenceListOnVehicleByVehicleIDCompleted;
        
        public event System.EventHandler<GetTrafficFenceListByVehicleIDAndFenceNameCompletedEventArgs> GetTrafficFenceListByVehicleIDAndFenceNameCompleted;
        
        public event System.EventHandler<InsertFenceQueueCompletedEventArgs> InsertFenceQueueCompleted;
        
        public event System.EventHandler<DeleteFenceQueueByIDCompletedEventArgs> DeleteFenceQueueByIDCompleted;
        
        public event System.EventHandler<ObsoleteFenceCompletedEventArgs> ObsoleteFenceCompleted;
        
        public event System.EventHandler<IsFenceDeliveredCompletedEventArgs> IsFenceDeliveredCompleted;
        
        public event System.EventHandler<GetAllFenceQueueListByFenceIDCompletedEventArgs> GetAllFenceQueueListByFenceIDCompleted;
        
        public event System.EventHandler<GetFenceQueueListByFenceIDCompletedEventArgs> GetFenceQueueListByFenceIDCompleted;
        
        public event System.EventHandler<DeliverFenceQueueToVehicleCompletedEventArgs> DeliverFenceQueueToVehicleCompleted;
        
        public event System.EventHandler<InsertTrafficRouteCompletedEventArgs> InsertTrafficRouteCompleted;
        
        public event System.EventHandler<UpdateTrafficRouteCompletedEventArgs> UpdateTrafficRouteCompleted;
        
        public event System.EventHandler<DeleteTrafficRouteByIDCompletedEventArgs> DeleteTrafficRouteByIDCompleted;
        
        public event System.EventHandler<GetTrafficRouteCompletedEventArgs> GetTrafficRouteCompleted;
        
        public event System.EventHandler<IsRouteExistsCompletedEventArgs> IsRouteExistsCompleted;
        
        public event System.EventHandler<GetTrafficRouteListByVehicleIDAndRouteNameCompletedEventArgs> GetTrafficRouteListByVehicleIDAndRouteNameCompleted;
        
        public event System.EventHandler<ObsoleteTrafficeRouteCompletedEventArgs> ObsoleteTrafficeRouteCompleted;
        
        public event System.EventHandler<IsRouteDeliveredCompletedEventArgs> IsRouteDeliveredCompleted;
        
        public event System.EventHandler<GetDeliveredTrafficRouteListByVehicleIDCompletedEventArgs> GetDeliveredTrafficRouteListByVehicleIDCompleted;
        
        public event System.EventHandler<InsertRouteQueueCompletedEventArgs> InsertRouteQueueCompleted;
        
        public event System.EventHandler<DeleteRouteQueueByIDCompletedEventArgs> DeleteRouteQueueByIDCompleted;
        
        public event System.EventHandler<GetRouteQueueByRouteIDCompletedEventArgs> GetRouteQueueByRouteIDCompleted;
        
        public event System.EventHandler<GetAllRouteQueueByRouteIDCompletedEventArgs> GetAllRouteQueueByRouteIDCompleted;
        
        public event System.EventHandler<DeliverRouteQueueToVehicleCompletedEventArgs> DeliverRouteQueueToVehicleCompleted;
        
        public event System.EventHandler<GetTrafficRouteListOnVehicleByVehicleIDCompletedEventArgs> GetTrafficRouteListOnVehicleByVehicleIDCompleted;
        
        public event System.EventHandler<CheckFenceNameExistCompletedEventArgs> CheckFenceNameExistCompleted;
        
        public event System.EventHandler<DeleteCarFenceByFenceIDCompletedEventArgs> DeleteCarFenceByFenceIDCompleted;
        
        public event System.EventHandler<GetVehicleByFenceCompletedEventArgs> GetVehicleByFenceCompleted;
        
        public event System.EventHandler<CheckSpeedLimitidNameExistCompletedEventArgs> CheckSpeedLimitidNameExistCompleted;
        
        public event System.EventHandler<CheckSpeedLimitNameExistCompletedEventArgs> CheckSpeedLimitNameExistCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginInsertTrafficFence(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertTrafficFence(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndInsertTrafficFence(System.IAsyncResult result) {
            return base.Channel.EndInsertTrafficFence(result);
        }
        
        private System.IAsyncResult OnBeginInsertTrafficFence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model = ((Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginInsertTrafficFence(model, callback, asyncState);
        }
        
        private object[] OnEndInsertTrafficFence(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndInsertTrafficFence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertTrafficFenceCompleted(object state) {
            if ((this.InsertTrafficFenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertTrafficFenceCompleted(this, new InsertTrafficFenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertTrafficFenceAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model) {
            this.InsertTrafficFenceAsync(model, null);
        }
        
        public void InsertTrafficFenceAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, object userState) {
            if ((this.onBeginInsertTrafficFenceDelegate == null)) {
                this.onBeginInsertTrafficFenceDelegate = new BeginOperationDelegate(this.OnBeginInsertTrafficFence);
            }
            if ((this.onEndInsertTrafficFenceDelegate == null)) {
                this.onEndInsertTrafficFenceDelegate = new EndOperationDelegate(this.OnEndInsertTrafficFence);
            }
            if ((this.onInsertTrafficFenceCompletedDelegate == null)) {
                this.onInsertTrafficFenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertTrafficFenceCompleted);
            }
            base.InvokeAsync(this.onBeginInsertTrafficFenceDelegate, new object[] {
                        model}, this.onEndInsertTrafficFenceDelegate, this.onInsertTrafficFenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginUpdateTrafficFence(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTrafficFence(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndUpdateTrafficFence(System.IAsyncResult result) {
            return base.Channel.EndUpdateTrafficFence(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTrafficFence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model = ((Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginUpdateTrafficFence(model, callback, asyncState);
        }
        
        private object[] OnEndUpdateTrafficFence(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndUpdateTrafficFence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTrafficFenceCompleted(object state) {
            if ((this.UpdateTrafficFenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTrafficFenceCompleted(this, new UpdateTrafficFenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTrafficFenceAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model) {
            this.UpdateTrafficFenceAsync(model, null);
        }
        
        public void UpdateTrafficFenceAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, object userState) {
            if ((this.onBeginUpdateTrafficFenceDelegate == null)) {
                this.onBeginUpdateTrafficFenceDelegate = new BeginOperationDelegate(this.OnBeginUpdateTrafficFence);
            }
            if ((this.onEndUpdateTrafficFenceDelegate == null)) {
                this.onEndUpdateTrafficFenceDelegate = new EndOperationDelegate(this.OnEndUpdateTrafficFence);
            }
            if ((this.onUpdateTrafficFenceCompletedDelegate == null)) {
                this.onUpdateTrafficFenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTrafficFenceCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTrafficFenceDelegate, new object[] {
                        model}, this.onEndUpdateTrafficFenceDelegate, this.onUpdateTrafficFenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginDeleteTrafficFenceByID(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTrafficFenceByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndDeleteTrafficFenceByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteTrafficFenceByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTrafficFenceByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginDeleteTrafficFenceByID(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteTrafficFenceByID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndDeleteTrafficFenceByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteTrafficFenceByIDCompleted(object state) {
            if ((this.DeleteTrafficFenceByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTrafficFenceByIDCompleted(this, new DeleteTrafficFenceByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTrafficFenceByIDAsync(string ID) {
            this.DeleteTrafficFenceByIDAsync(ID, null);
        }
        
        public void DeleteTrafficFenceByIDAsync(string ID, object userState) {
            if ((this.onBeginDeleteTrafficFenceByIDDelegate == null)) {
                this.onBeginDeleteTrafficFenceByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteTrafficFenceByID);
            }
            if ((this.onEndDeleteTrafficFenceByIDDelegate == null)) {
                this.onEndDeleteTrafficFenceByIDDelegate = new EndOperationDelegate(this.OnEndDeleteTrafficFenceByID);
            }
            if ((this.onDeleteTrafficFenceByIDCompletedDelegate == null)) {
                this.onDeleteTrafficFenceByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTrafficFenceByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTrafficFenceByIDDelegate, new object[] {
                        ID}, this.onEndDeleteTrafficFenceByIDDelegate, this.onDeleteTrafficFenceByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetTrafficFence(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrafficFence(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetTrafficFence(System.IAsyncResult result) {
            return base.Channel.EndGetTrafficFence(result);
        }
        
        private System.IAsyncResult OnBeginGetTrafficFence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetTrafficFence(ID, callback, asyncState);
        }
        
        private object[] OnEndGetTrafficFence(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetTrafficFence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrafficFenceCompleted(object state) {
            if ((this.GetTrafficFenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrafficFenceCompleted(this, new GetTrafficFenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrafficFenceAsync(string ID) {
            this.GetTrafficFenceAsync(ID, null);
        }
        
        public void GetTrafficFenceAsync(string ID, object userState) {
            if ((this.onBeginGetTrafficFenceDelegate == null)) {
                this.onBeginGetTrafficFenceDelegate = new BeginOperationDelegate(this.OnBeginGetTrafficFence);
            }
            if ((this.onEndGetTrafficFenceDelegate == null)) {
                this.onEndGetTrafficFenceDelegate = new EndOperationDelegate(this.OnEndGetTrafficFence);
            }
            if ((this.onGetTrafficFenceCompletedDelegate == null)) {
                this.onGetTrafficFenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrafficFenceCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrafficFenceDelegate, new object[] {
                        ID}, this.onEndGetTrafficFenceDelegate, this.onGetTrafficFenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginIsTrafficExists(string fenceName, string clientID, string fenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsTrafficExists(fenceName, clientID, fenceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndIsTrafficExists(System.IAsyncResult result) {
            return base.Channel.EndIsTrafficExists(result);
        }
        
        private System.IAsyncResult OnBeginIsTrafficExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fenceName = ((string)(inValues[0]));
            string clientID = ((string)(inValues[1]));
            string fenceID = ((string)(inValues[2]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginIsTrafficExists(fenceName, clientID, fenceID, callback, asyncState);
        }
        
        private object[] OnEndIsTrafficExists(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndIsTrafficExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsTrafficExistsCompleted(object state) {
            if ((this.IsTrafficExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsTrafficExistsCompleted(this, new IsTrafficExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsTrafficExistsAsync(string fenceName, string clientID, string fenceID) {
            this.IsTrafficExistsAsync(fenceName, clientID, fenceID, null);
        }
        
        public void IsTrafficExistsAsync(string fenceName, string clientID, string fenceID, object userState) {
            if ((this.onBeginIsTrafficExistsDelegate == null)) {
                this.onBeginIsTrafficExistsDelegate = new BeginOperationDelegate(this.OnBeginIsTrafficExists);
            }
            if ((this.onEndIsTrafficExistsDelegate == null)) {
                this.onEndIsTrafficExistsDelegate = new EndOperationDelegate(this.OnEndIsTrafficExists);
            }
            if ((this.onIsTrafficExistsCompletedDelegate == null)) {
                this.onIsTrafficExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsTrafficExistsCompleted);
            }
            base.InvokeAsync(this.onBeginIsTrafficExistsDelegate, new object[] {
                        fenceName,
                        clientID,
                        fenceID}, this.onEndIsTrafficExistsDelegate, this.onIsTrafficExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetDeliveredTrafficFenceListByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeliveredTrafficFenceListByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetDeliveredTrafficFenceListByVehicleID(System.IAsyncResult result) {
            return base.Channel.EndGetDeliveredTrafficFenceListByVehicleID(result);
        }
        
        private System.IAsyncResult OnBeginGetDeliveredTrafficFenceListByVehicleID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vehicleID = ((string)(inValues[0]));
            string clientID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetDeliveredTrafficFenceListByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        private object[] OnEndGetDeliveredTrafficFenceListByVehicleID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetDeliveredTrafficFenceListByVehicleID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeliveredTrafficFenceListByVehicleIDCompleted(object state) {
            if ((this.GetDeliveredTrafficFenceListByVehicleIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeliveredTrafficFenceListByVehicleIDCompleted(this, new GetDeliveredTrafficFenceListByVehicleIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeliveredTrafficFenceListByVehicleIDAsync(string vehicleID, string clientID) {
            this.GetDeliveredTrafficFenceListByVehicleIDAsync(vehicleID, clientID, null);
        }
        
        public void GetDeliveredTrafficFenceListByVehicleIDAsync(string vehicleID, string clientID, object userState) {
            if ((this.onBeginGetDeliveredTrafficFenceListByVehicleIDDelegate == null)) {
                this.onBeginGetDeliveredTrafficFenceListByVehicleIDDelegate = new BeginOperationDelegate(this.OnBeginGetDeliveredTrafficFenceListByVehicleID);
            }
            if ((this.onEndGetDeliveredTrafficFenceListByVehicleIDDelegate == null)) {
                this.onEndGetDeliveredTrafficFenceListByVehicleIDDelegate = new EndOperationDelegate(this.OnEndGetDeliveredTrafficFenceListByVehicleID);
            }
            if ((this.onGetDeliveredTrafficFenceListByVehicleIDCompletedDelegate == null)) {
                this.onGetDeliveredTrafficFenceListByVehicleIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeliveredTrafficFenceListByVehicleIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeliveredTrafficFenceListByVehicleIDDelegate, new object[] {
                        vehicleID,
                        clientID}, this.onEndGetDeliveredTrafficFenceListByVehicleIDDelegate, this.onGetDeliveredTrafficFenceListByVehicleIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetTrafficFenceListOnVehicleByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrafficFenceListOnVehicleByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetTrafficFenceListOnVehicleByVehicleID(System.IAsyncResult result) {
            return base.Channel.EndGetTrafficFenceListOnVehicleByVehicleID(result);
        }
        
        private System.IAsyncResult OnBeginGetTrafficFenceListOnVehicleByVehicleID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vehicleID = ((string)(inValues[0]));
            string clientID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetTrafficFenceListOnVehicleByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        private object[] OnEndGetTrafficFenceListOnVehicleByVehicleID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetTrafficFenceListOnVehicleByVehicleID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrafficFenceListOnVehicleByVehicleIDCompleted(object state) {
            if ((this.GetTrafficFenceListOnVehicleByVehicleIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrafficFenceListOnVehicleByVehicleIDCompleted(this, new GetTrafficFenceListOnVehicleByVehicleIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrafficFenceListOnVehicleByVehicleIDAsync(string vehicleID, string clientID) {
            this.GetTrafficFenceListOnVehicleByVehicleIDAsync(vehicleID, clientID, null);
        }
        
        public void GetTrafficFenceListOnVehicleByVehicleIDAsync(string vehicleID, string clientID, object userState) {
            if ((this.onBeginGetTrafficFenceListOnVehicleByVehicleIDDelegate == null)) {
                this.onBeginGetTrafficFenceListOnVehicleByVehicleIDDelegate = new BeginOperationDelegate(this.OnBeginGetTrafficFenceListOnVehicleByVehicleID);
            }
            if ((this.onEndGetTrafficFenceListOnVehicleByVehicleIDDelegate == null)) {
                this.onEndGetTrafficFenceListOnVehicleByVehicleIDDelegate = new EndOperationDelegate(this.OnEndGetTrafficFenceListOnVehicleByVehicleID);
            }
            if ((this.onGetTrafficFenceListOnVehicleByVehicleIDCompletedDelegate == null)) {
                this.onGetTrafficFenceListOnVehicleByVehicleIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrafficFenceListOnVehicleByVehicleIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrafficFenceListOnVehicleByVehicleIDDelegate, new object[] {
                        vehicleID,
                        clientID}, this.onEndGetTrafficFenceListOnVehicleByVehicleIDDelegate, this.onGetTrafficFenceListOnVehicleByVehicleIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetTrafficFenceListByVehicleIDAndFenceName(string fenceName, string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrafficFenceListByVehicleIDAndFenceName(fenceName, vehicleID, clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetTrafficFenceListByVehicleIDAndFenceName(System.IAsyncResult result) {
            return base.Channel.EndGetTrafficFenceListByVehicleIDAndFenceName(result);
        }
        
        private System.IAsyncResult OnBeginGetTrafficFenceListByVehicleIDAndFenceName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fenceName = ((string)(inValues[0]));
            string vehicleID = ((string)(inValues[1]));
            string clientID = ((string)(inValues[2]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetTrafficFenceListByVehicleIDAndFenceName(fenceName, vehicleID, clientID, callback, asyncState);
        }
        
        private object[] OnEndGetTrafficFenceListByVehicleIDAndFenceName(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetTrafficFenceListByVehicleIDAndFenceName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrafficFenceListByVehicleIDAndFenceNameCompleted(object state) {
            if ((this.GetTrafficFenceListByVehicleIDAndFenceNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrafficFenceListByVehicleIDAndFenceNameCompleted(this, new GetTrafficFenceListByVehicleIDAndFenceNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrafficFenceListByVehicleIDAndFenceNameAsync(string fenceName, string vehicleID, string clientID) {
            this.GetTrafficFenceListByVehicleIDAndFenceNameAsync(fenceName, vehicleID, clientID, null);
        }
        
        public void GetTrafficFenceListByVehicleIDAndFenceNameAsync(string fenceName, string vehicleID, string clientID, object userState) {
            if ((this.onBeginGetTrafficFenceListByVehicleIDAndFenceNameDelegate == null)) {
                this.onBeginGetTrafficFenceListByVehicleIDAndFenceNameDelegate = new BeginOperationDelegate(this.OnBeginGetTrafficFenceListByVehicleIDAndFenceName);
            }
            if ((this.onEndGetTrafficFenceListByVehicleIDAndFenceNameDelegate == null)) {
                this.onEndGetTrafficFenceListByVehicleIDAndFenceNameDelegate = new EndOperationDelegate(this.OnEndGetTrafficFenceListByVehicleIDAndFenceName);
            }
            if ((this.onGetTrafficFenceListByVehicleIDAndFenceNameCompletedDelegate == null)) {
                this.onGetTrafficFenceListByVehicleIDAndFenceNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrafficFenceListByVehicleIDAndFenceNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrafficFenceListByVehicleIDAndFenceNameDelegate, new object[] {
                        fenceName,
                        vehicleID,
                        clientID}, this.onEndGetTrafficFenceListByVehicleIDAndFenceNameDelegate, this.onGetTrafficFenceListByVehicleIDAndFenceNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginInsertFenceQueue(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> fencequeues, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertFenceQueue(fencequeues, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndInsertFenceQueue(System.IAsyncResult result) {
            return base.Channel.EndInsertFenceQueue(result);
        }
        
        private System.IAsyncResult OnBeginInsertFenceQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> fencequeues = ((System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue>)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginInsertFenceQueue(fencequeues, callback, asyncState);
        }
        
        private object[] OnEndInsertFenceQueue(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndInsertFenceQueue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertFenceQueueCompleted(object state) {
            if ((this.InsertFenceQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertFenceQueueCompleted(this, new InsertFenceQueueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertFenceQueueAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> fencequeues) {
            this.InsertFenceQueueAsync(fencequeues, null);
        }
        
        public void InsertFenceQueueAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> fencequeues, object userState) {
            if ((this.onBeginInsertFenceQueueDelegate == null)) {
                this.onBeginInsertFenceQueueDelegate = new BeginOperationDelegate(this.OnBeginInsertFenceQueue);
            }
            if ((this.onEndInsertFenceQueueDelegate == null)) {
                this.onEndInsertFenceQueueDelegate = new EndOperationDelegate(this.OnEndInsertFenceQueue);
            }
            if ((this.onInsertFenceQueueCompletedDelegate == null)) {
                this.onInsertFenceQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertFenceQueueCompleted);
            }
            base.InvokeAsync(this.onBeginInsertFenceQueueDelegate, new object[] {
                        fencequeues}, this.onEndInsertFenceQueueDelegate, this.onInsertFenceQueueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginDeleteFenceQueueByID(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFenceQueueByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndDeleteFenceQueueByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteFenceQueueByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFenceQueueByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginDeleteFenceQueueByID(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteFenceQueueByID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndDeleteFenceQueueByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFenceQueueByIDCompleted(object state) {
            if ((this.DeleteFenceQueueByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFenceQueueByIDCompleted(this, new DeleteFenceQueueByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFenceQueueByIDAsync(string ID) {
            this.DeleteFenceQueueByIDAsync(ID, null);
        }
        
        public void DeleteFenceQueueByIDAsync(string ID, object userState) {
            if ((this.onBeginDeleteFenceQueueByIDDelegate == null)) {
                this.onBeginDeleteFenceQueueByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteFenceQueueByID);
            }
            if ((this.onEndDeleteFenceQueueByIDDelegate == null)) {
                this.onEndDeleteFenceQueueByIDDelegate = new EndOperationDelegate(this.OnEndDeleteFenceQueueByID);
            }
            if ((this.onDeleteFenceQueueByIDCompletedDelegate == null)) {
                this.onDeleteFenceQueueByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFenceQueueByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFenceQueueByIDDelegate, new object[] {
                        ID}, this.onEndDeleteFenceQueueByIDDelegate, this.onDeleteFenceQueueByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginObsoleteFence(string fenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginObsoleteFence(fenceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndObsoleteFence(System.IAsyncResult result) {
            return base.Channel.EndObsoleteFence(result);
        }
        
        private System.IAsyncResult OnBeginObsoleteFence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fenceID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginObsoleteFence(fenceID, callback, asyncState);
        }
        
        private object[] OnEndObsoleteFence(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndObsoleteFence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnObsoleteFenceCompleted(object state) {
            if ((this.ObsoleteFenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ObsoleteFenceCompleted(this, new ObsoleteFenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ObsoleteFenceAsync(string fenceID) {
            this.ObsoleteFenceAsync(fenceID, null);
        }
        
        public void ObsoleteFenceAsync(string fenceID, object userState) {
            if ((this.onBeginObsoleteFenceDelegate == null)) {
                this.onBeginObsoleteFenceDelegate = new BeginOperationDelegate(this.OnBeginObsoleteFence);
            }
            if ((this.onEndObsoleteFenceDelegate == null)) {
                this.onEndObsoleteFenceDelegate = new EndOperationDelegate(this.OnEndObsoleteFence);
            }
            if ((this.onObsoleteFenceCompletedDelegate == null)) {
                this.onObsoleteFenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnObsoleteFenceCompleted);
            }
            base.InvokeAsync(this.onBeginObsoleteFenceDelegate, new object[] {
                        fenceID}, this.onEndObsoleteFenceDelegate, this.onObsoleteFenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginIsFenceDelivered(string fenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsFenceDelivered(fenceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndIsFenceDelivered(System.IAsyncResult result) {
            return base.Channel.EndIsFenceDelivered(result);
        }
        
        private System.IAsyncResult OnBeginIsFenceDelivered(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fenceID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginIsFenceDelivered(fenceID, callback, asyncState);
        }
        
        private object[] OnEndIsFenceDelivered(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndIsFenceDelivered(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsFenceDeliveredCompleted(object state) {
            if ((this.IsFenceDeliveredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsFenceDeliveredCompleted(this, new IsFenceDeliveredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsFenceDeliveredAsync(string fenceID) {
            this.IsFenceDeliveredAsync(fenceID, null);
        }
        
        public void IsFenceDeliveredAsync(string fenceID, object userState) {
            if ((this.onBeginIsFenceDeliveredDelegate == null)) {
                this.onBeginIsFenceDeliveredDelegate = new BeginOperationDelegate(this.OnBeginIsFenceDelivered);
            }
            if ((this.onEndIsFenceDeliveredDelegate == null)) {
                this.onEndIsFenceDeliveredDelegate = new EndOperationDelegate(this.OnEndIsFenceDelivered);
            }
            if ((this.onIsFenceDeliveredCompletedDelegate == null)) {
                this.onIsFenceDeliveredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsFenceDeliveredCompleted);
            }
            base.InvokeAsync(this.onBeginIsFenceDeliveredDelegate, new object[] {
                        fenceID}, this.onEndIsFenceDeliveredDelegate, this.onIsFenceDeliveredCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetAllFenceQueueListByFenceID(string clientID, string fenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllFenceQueueListByFenceID(clientID, fenceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetAllFenceQueueListByFenceID(System.IAsyncResult result) {
            return base.Channel.EndGetAllFenceQueueListByFenceID(result);
        }
        
        private System.IAsyncResult OnBeginGetAllFenceQueueListByFenceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string clientID = ((string)(inValues[0]));
            string fenceID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetAllFenceQueueListByFenceID(clientID, fenceID, callback, asyncState);
        }
        
        private object[] OnEndGetAllFenceQueueListByFenceID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetAllFenceQueueListByFenceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllFenceQueueListByFenceIDCompleted(object state) {
            if ((this.GetAllFenceQueueListByFenceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllFenceQueueListByFenceIDCompleted(this, new GetAllFenceQueueListByFenceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllFenceQueueListByFenceIDAsync(string clientID, string fenceID) {
            this.GetAllFenceQueueListByFenceIDAsync(clientID, fenceID, null);
        }
        
        public void GetAllFenceQueueListByFenceIDAsync(string clientID, string fenceID, object userState) {
            if ((this.onBeginGetAllFenceQueueListByFenceIDDelegate == null)) {
                this.onBeginGetAllFenceQueueListByFenceIDDelegate = new BeginOperationDelegate(this.OnBeginGetAllFenceQueueListByFenceID);
            }
            if ((this.onEndGetAllFenceQueueListByFenceIDDelegate == null)) {
                this.onEndGetAllFenceQueueListByFenceIDDelegate = new EndOperationDelegate(this.OnEndGetAllFenceQueueListByFenceID);
            }
            if ((this.onGetAllFenceQueueListByFenceIDCompletedDelegate == null)) {
                this.onGetAllFenceQueueListByFenceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllFenceQueueListByFenceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllFenceQueueListByFenceIDDelegate, new object[] {
                        clientID,
                        fenceID}, this.onEndGetAllFenceQueueListByFenceIDDelegate, this.onGetAllFenceQueueListByFenceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetFenceQueueListByFenceID(string fenceID, string clientID, string vehicleName, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFenceQueueListByFenceID(fenceID, clientID, vehicleName, pageIndex, pageSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetFenceQueueListByFenceID(System.IAsyncResult result) {
            return base.Channel.EndGetFenceQueueListByFenceID(result);
        }
        
        private System.IAsyncResult OnBeginGetFenceQueueListByFenceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fenceID = ((string)(inValues[0]));
            string clientID = ((string)(inValues[1]));
            string vehicleName = ((string)(inValues[2]));
            int pageIndex = ((int)(inValues[3]));
            int pageSize = ((int)(inValues[4]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetFenceQueueListByFenceID(fenceID, clientID, vehicleName, pageIndex, pageSize, callback, asyncState);
        }
        
        private object[] OnEndGetFenceQueueListByFenceID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetFenceQueueListByFenceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFenceQueueListByFenceIDCompleted(object state) {
            if ((this.GetFenceQueueListByFenceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFenceQueueListByFenceIDCompleted(this, new GetFenceQueueListByFenceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFenceQueueListByFenceIDAsync(string fenceID, string clientID, string vehicleName, int pageIndex, int pageSize) {
            this.GetFenceQueueListByFenceIDAsync(fenceID, clientID, vehicleName, pageIndex, pageSize, null);
        }
        
        public void GetFenceQueueListByFenceIDAsync(string fenceID, string clientID, string vehicleName, int pageIndex, int pageSize, object userState) {
            if ((this.onBeginGetFenceQueueListByFenceIDDelegate == null)) {
                this.onBeginGetFenceQueueListByFenceIDDelegate = new BeginOperationDelegate(this.OnBeginGetFenceQueueListByFenceID);
            }
            if ((this.onEndGetFenceQueueListByFenceIDDelegate == null)) {
                this.onEndGetFenceQueueListByFenceIDDelegate = new EndOperationDelegate(this.OnEndGetFenceQueueListByFenceID);
            }
            if ((this.onGetFenceQueueListByFenceIDCompletedDelegate == null)) {
                this.onGetFenceQueueListByFenceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFenceQueueListByFenceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetFenceQueueListByFenceIDDelegate, new object[] {
                        fenceID,
                        clientID,
                        vehicleName,
                        pageIndex,
                        pageSize}, this.onEndGetFenceQueueListByFenceIDDelegate, this.onGetFenceQueueListByFenceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginDeliverFenceQueueToVehicle(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> vehicles, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeliverFenceQueueToVehicle(vehicles, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndDeliverFenceQueueToVehicle(System.IAsyncResult result) {
            return base.Channel.EndDeliverFenceQueueToVehicle(result);
        }
        
        private System.IAsyncResult OnBeginDeliverFenceQueueToVehicle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> vehicles = ((System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue>)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginDeliverFenceQueueToVehicle(vehicles, callback, asyncState);
        }
        
        private object[] OnEndDeliverFenceQueueToVehicle(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndDeliverFenceQueueToVehicle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeliverFenceQueueToVehicleCompleted(object state) {
            if ((this.DeliverFenceQueueToVehicleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeliverFenceQueueToVehicleCompleted(this, new DeliverFenceQueueToVehicleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeliverFenceQueueToVehicleAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> vehicles) {
            this.DeliverFenceQueueToVehicleAsync(vehicles, null);
        }
        
        public void DeliverFenceQueueToVehicleAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> vehicles, object userState) {
            if ((this.onBeginDeliverFenceQueueToVehicleDelegate == null)) {
                this.onBeginDeliverFenceQueueToVehicleDelegate = new BeginOperationDelegate(this.OnBeginDeliverFenceQueueToVehicle);
            }
            if ((this.onEndDeliverFenceQueueToVehicleDelegate == null)) {
                this.onEndDeliverFenceQueueToVehicleDelegate = new EndOperationDelegate(this.OnEndDeliverFenceQueueToVehicle);
            }
            if ((this.onDeliverFenceQueueToVehicleCompletedDelegate == null)) {
                this.onDeliverFenceQueueToVehicleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeliverFenceQueueToVehicleCompleted);
            }
            base.InvokeAsync(this.onBeginDeliverFenceQueueToVehicleDelegate, new object[] {
                        vehicles}, this.onEndDeliverFenceQueueToVehicleDelegate, this.onDeliverFenceQueueToVehicleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginInsertTrafficRoute(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertTrafficRoute(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndInsertTrafficRoute(System.IAsyncResult result) {
            return base.Channel.EndInsertTrafficRoute(result);
        }
        
        private System.IAsyncResult OnBeginInsertTrafficRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model = ((Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginInsertTrafficRoute(model, callback, asyncState);
        }
        
        private object[] OnEndInsertTrafficRoute(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndInsertTrafficRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertTrafficRouteCompleted(object state) {
            if ((this.InsertTrafficRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertTrafficRouteCompleted(this, new InsertTrafficRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertTrafficRouteAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model) {
            this.InsertTrafficRouteAsync(model, null);
        }
        
        public void InsertTrafficRouteAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, object userState) {
            if ((this.onBeginInsertTrafficRouteDelegate == null)) {
                this.onBeginInsertTrafficRouteDelegate = new BeginOperationDelegate(this.OnBeginInsertTrafficRoute);
            }
            if ((this.onEndInsertTrafficRouteDelegate == null)) {
                this.onEndInsertTrafficRouteDelegate = new EndOperationDelegate(this.OnEndInsertTrafficRoute);
            }
            if ((this.onInsertTrafficRouteCompletedDelegate == null)) {
                this.onInsertTrafficRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertTrafficRouteCompleted);
            }
            base.InvokeAsync(this.onBeginInsertTrafficRouteDelegate, new object[] {
                        model}, this.onEndInsertTrafficRouteDelegate, this.onInsertTrafficRouteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginUpdateTrafficRoute(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTrafficRoute(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndUpdateTrafficRoute(System.IAsyncResult result) {
            return base.Channel.EndUpdateTrafficRoute(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTrafficRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model = ((Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginUpdateTrafficRoute(model, callback, asyncState);
        }
        
        private object[] OnEndUpdateTrafficRoute(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndUpdateTrafficRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTrafficRouteCompleted(object state) {
            if ((this.UpdateTrafficRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTrafficRouteCompleted(this, new UpdateTrafficRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTrafficRouteAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model) {
            this.UpdateTrafficRouteAsync(model, null);
        }
        
        public void UpdateTrafficRouteAsync(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, object userState) {
            if ((this.onBeginUpdateTrafficRouteDelegate == null)) {
                this.onBeginUpdateTrafficRouteDelegate = new BeginOperationDelegate(this.OnBeginUpdateTrafficRoute);
            }
            if ((this.onEndUpdateTrafficRouteDelegate == null)) {
                this.onEndUpdateTrafficRouteDelegate = new EndOperationDelegate(this.OnEndUpdateTrafficRoute);
            }
            if ((this.onUpdateTrafficRouteCompletedDelegate == null)) {
                this.onUpdateTrafficRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTrafficRouteCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTrafficRouteDelegate, new object[] {
                        model}, this.onEndUpdateTrafficRouteDelegate, this.onUpdateTrafficRouteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginDeleteTrafficRouteByID(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTrafficRouteByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndDeleteTrafficRouteByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteTrafficRouteByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTrafficRouteByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginDeleteTrafficRouteByID(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteTrafficRouteByID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndDeleteTrafficRouteByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteTrafficRouteByIDCompleted(object state) {
            if ((this.DeleteTrafficRouteByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTrafficRouteByIDCompleted(this, new DeleteTrafficRouteByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTrafficRouteByIDAsync(string ID) {
            this.DeleteTrafficRouteByIDAsync(ID, null);
        }
        
        public void DeleteTrafficRouteByIDAsync(string ID, object userState) {
            if ((this.onBeginDeleteTrafficRouteByIDDelegate == null)) {
                this.onBeginDeleteTrafficRouteByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteTrafficRouteByID);
            }
            if ((this.onEndDeleteTrafficRouteByIDDelegate == null)) {
                this.onEndDeleteTrafficRouteByIDDelegate = new EndOperationDelegate(this.OnEndDeleteTrafficRouteByID);
            }
            if ((this.onDeleteTrafficRouteByIDCompletedDelegate == null)) {
                this.onDeleteTrafficRouteByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTrafficRouteByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTrafficRouteByIDDelegate, new object[] {
                        ID}, this.onEndDeleteTrafficRouteByIDDelegate, this.onDeleteTrafficRouteByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetTrafficRoute(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrafficRoute(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetTrafficRoute(System.IAsyncResult result) {
            return base.Channel.EndGetTrafficRoute(result);
        }
        
        private System.IAsyncResult OnBeginGetTrafficRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetTrafficRoute(ID, callback, asyncState);
        }
        
        private object[] OnEndGetTrafficRoute(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetTrafficRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrafficRouteCompleted(object state) {
            if ((this.GetTrafficRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrafficRouteCompleted(this, new GetTrafficRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrafficRouteAsync(string ID) {
            this.GetTrafficRouteAsync(ID, null);
        }
        
        public void GetTrafficRouteAsync(string ID, object userState) {
            if ((this.onBeginGetTrafficRouteDelegate == null)) {
                this.onBeginGetTrafficRouteDelegate = new BeginOperationDelegate(this.OnBeginGetTrafficRoute);
            }
            if ((this.onEndGetTrafficRouteDelegate == null)) {
                this.onEndGetTrafficRouteDelegate = new EndOperationDelegate(this.OnEndGetTrafficRoute);
            }
            if ((this.onGetTrafficRouteCompletedDelegate == null)) {
                this.onGetTrafficRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrafficRouteCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrafficRouteDelegate, new object[] {
                        ID}, this.onEndGetTrafficRouteDelegate, this.onGetTrafficRouteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginIsRouteExists(string routeName, string clientID, string routeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsRouteExists(routeName, clientID, routeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndIsRouteExists(System.IAsyncResult result) {
            return base.Channel.EndIsRouteExists(result);
        }
        
        private System.IAsyncResult OnBeginIsRouteExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeName = ((string)(inValues[0]));
            string clientID = ((string)(inValues[1]));
            string routeID = ((string)(inValues[2]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginIsRouteExists(routeName, clientID, routeID, callback, asyncState);
        }
        
        private object[] OnEndIsRouteExists(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndIsRouteExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsRouteExistsCompleted(object state) {
            if ((this.IsRouteExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsRouteExistsCompleted(this, new IsRouteExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsRouteExistsAsync(string routeName, string clientID, string routeID) {
            this.IsRouteExistsAsync(routeName, clientID, routeID, null);
        }
        
        public void IsRouteExistsAsync(string routeName, string clientID, string routeID, object userState) {
            if ((this.onBeginIsRouteExistsDelegate == null)) {
                this.onBeginIsRouteExistsDelegate = new BeginOperationDelegate(this.OnBeginIsRouteExists);
            }
            if ((this.onEndIsRouteExistsDelegate == null)) {
                this.onEndIsRouteExistsDelegate = new EndOperationDelegate(this.OnEndIsRouteExists);
            }
            if ((this.onIsRouteExistsCompletedDelegate == null)) {
                this.onIsRouteExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsRouteExistsCompleted);
            }
            base.InvokeAsync(this.onBeginIsRouteExistsDelegate, new object[] {
                        routeName,
                        clientID,
                        routeID}, this.onEndIsRouteExistsDelegate, this.onIsRouteExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetTrafficRouteListByVehicleIDAndRouteName(string routeName, string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrafficRouteListByVehicleIDAndRouteName(routeName, vehicleID, clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetTrafficRouteListByVehicleIDAndRouteName(System.IAsyncResult result) {
            return base.Channel.EndGetTrafficRouteListByVehicleIDAndRouteName(result);
        }
        
        private System.IAsyncResult OnBeginGetTrafficRouteListByVehicleIDAndRouteName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeName = ((string)(inValues[0]));
            string vehicleID = ((string)(inValues[1]));
            string clientID = ((string)(inValues[2]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetTrafficRouteListByVehicleIDAndRouteName(routeName, vehicleID, clientID, callback, asyncState);
        }
        
        private object[] OnEndGetTrafficRouteListByVehicleIDAndRouteName(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetTrafficRouteListByVehicleIDAndRouteName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrafficRouteListByVehicleIDAndRouteNameCompleted(object state) {
            if ((this.GetTrafficRouteListByVehicleIDAndRouteNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrafficRouteListByVehicleIDAndRouteNameCompleted(this, new GetTrafficRouteListByVehicleIDAndRouteNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrafficRouteListByVehicleIDAndRouteNameAsync(string routeName, string vehicleID, string clientID) {
            this.GetTrafficRouteListByVehicleIDAndRouteNameAsync(routeName, vehicleID, clientID, null);
        }
        
        public void GetTrafficRouteListByVehicleIDAndRouteNameAsync(string routeName, string vehicleID, string clientID, object userState) {
            if ((this.onBeginGetTrafficRouteListByVehicleIDAndRouteNameDelegate == null)) {
                this.onBeginGetTrafficRouteListByVehicleIDAndRouteNameDelegate = new BeginOperationDelegate(this.OnBeginGetTrafficRouteListByVehicleIDAndRouteName);
            }
            if ((this.onEndGetTrafficRouteListByVehicleIDAndRouteNameDelegate == null)) {
                this.onEndGetTrafficRouteListByVehicleIDAndRouteNameDelegate = new EndOperationDelegate(this.OnEndGetTrafficRouteListByVehicleIDAndRouteName);
            }
            if ((this.onGetTrafficRouteListByVehicleIDAndRouteNameCompletedDelegate == null)) {
                this.onGetTrafficRouteListByVehicleIDAndRouteNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrafficRouteListByVehicleIDAndRouteNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrafficRouteListByVehicleIDAndRouteNameDelegate, new object[] {
                        routeName,
                        vehicleID,
                        clientID}, this.onEndGetTrafficRouteListByVehicleIDAndRouteNameDelegate, this.onGetTrafficRouteListByVehicleIDAndRouteNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginObsoleteTrafficeRoute(string routeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginObsoleteTrafficeRoute(routeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndObsoleteTrafficeRoute(System.IAsyncResult result) {
            return base.Channel.EndObsoleteTrafficeRoute(result);
        }
        
        private System.IAsyncResult OnBeginObsoleteTrafficeRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginObsoleteTrafficeRoute(routeID, callback, asyncState);
        }
        
        private object[] OnEndObsoleteTrafficeRoute(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndObsoleteTrafficeRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnObsoleteTrafficeRouteCompleted(object state) {
            if ((this.ObsoleteTrafficeRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ObsoleteTrafficeRouteCompleted(this, new ObsoleteTrafficeRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ObsoleteTrafficeRouteAsync(string routeID) {
            this.ObsoleteTrafficeRouteAsync(routeID, null);
        }
        
        public void ObsoleteTrafficeRouteAsync(string routeID, object userState) {
            if ((this.onBeginObsoleteTrafficeRouteDelegate == null)) {
                this.onBeginObsoleteTrafficeRouteDelegate = new BeginOperationDelegate(this.OnBeginObsoleteTrafficeRoute);
            }
            if ((this.onEndObsoleteTrafficeRouteDelegate == null)) {
                this.onEndObsoleteTrafficeRouteDelegate = new EndOperationDelegate(this.OnEndObsoleteTrafficeRoute);
            }
            if ((this.onObsoleteTrafficeRouteCompletedDelegate == null)) {
                this.onObsoleteTrafficeRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnObsoleteTrafficeRouteCompleted);
            }
            base.InvokeAsync(this.onBeginObsoleteTrafficeRouteDelegate, new object[] {
                        routeID}, this.onEndObsoleteTrafficeRouteDelegate, this.onObsoleteTrafficeRouteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginIsRouteDelivered(string routeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsRouteDelivered(routeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndIsRouteDelivered(System.IAsyncResult result) {
            return base.Channel.EndIsRouteDelivered(result);
        }
        
        private System.IAsyncResult OnBeginIsRouteDelivered(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string routeID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginIsRouteDelivered(routeID, callback, asyncState);
        }
        
        private object[] OnEndIsRouteDelivered(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndIsRouteDelivered(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsRouteDeliveredCompleted(object state) {
            if ((this.IsRouteDeliveredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsRouteDeliveredCompleted(this, new IsRouteDeliveredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsRouteDeliveredAsync(string routeID) {
            this.IsRouteDeliveredAsync(routeID, null);
        }
        
        public void IsRouteDeliveredAsync(string routeID, object userState) {
            if ((this.onBeginIsRouteDeliveredDelegate == null)) {
                this.onBeginIsRouteDeliveredDelegate = new BeginOperationDelegate(this.OnBeginIsRouteDelivered);
            }
            if ((this.onEndIsRouteDeliveredDelegate == null)) {
                this.onEndIsRouteDeliveredDelegate = new EndOperationDelegate(this.OnEndIsRouteDelivered);
            }
            if ((this.onIsRouteDeliveredCompletedDelegate == null)) {
                this.onIsRouteDeliveredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsRouteDeliveredCompleted);
            }
            base.InvokeAsync(this.onBeginIsRouteDeliveredDelegate, new object[] {
                        routeID}, this.onEndIsRouteDeliveredDelegate, this.onIsRouteDeliveredCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetDeliveredTrafficRouteListByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeliveredTrafficRouteListByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetDeliveredTrafficRouteListByVehicleID(System.IAsyncResult result) {
            return base.Channel.EndGetDeliveredTrafficRouteListByVehicleID(result);
        }
        
        private System.IAsyncResult OnBeginGetDeliveredTrafficRouteListByVehicleID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vehicleID = ((string)(inValues[0]));
            string clientID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetDeliveredTrafficRouteListByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        private object[] OnEndGetDeliveredTrafficRouteListByVehicleID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetDeliveredTrafficRouteListByVehicleID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeliveredTrafficRouteListByVehicleIDCompleted(object state) {
            if ((this.GetDeliveredTrafficRouteListByVehicleIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeliveredTrafficRouteListByVehicleIDCompleted(this, new GetDeliveredTrafficRouteListByVehicleIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeliveredTrafficRouteListByVehicleIDAsync(string vehicleID, string clientID) {
            this.GetDeliveredTrafficRouteListByVehicleIDAsync(vehicleID, clientID, null);
        }
        
        public void GetDeliveredTrafficRouteListByVehicleIDAsync(string vehicleID, string clientID, object userState) {
            if ((this.onBeginGetDeliveredTrafficRouteListByVehicleIDDelegate == null)) {
                this.onBeginGetDeliveredTrafficRouteListByVehicleIDDelegate = new BeginOperationDelegate(this.OnBeginGetDeliveredTrafficRouteListByVehicleID);
            }
            if ((this.onEndGetDeliveredTrafficRouteListByVehicleIDDelegate == null)) {
                this.onEndGetDeliveredTrafficRouteListByVehicleIDDelegate = new EndOperationDelegate(this.OnEndGetDeliveredTrafficRouteListByVehicleID);
            }
            if ((this.onGetDeliveredTrafficRouteListByVehicleIDCompletedDelegate == null)) {
                this.onGetDeliveredTrafficRouteListByVehicleIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeliveredTrafficRouteListByVehicleIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeliveredTrafficRouteListByVehicleIDDelegate, new object[] {
                        vehicleID,
                        clientID}, this.onEndGetDeliveredTrafficRouteListByVehicleIDDelegate, this.onGetDeliveredTrafficRouteListByVehicleIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginInsertRouteQueue(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> routequeues, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertRouteQueue(routequeues, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndInsertRouteQueue(System.IAsyncResult result) {
            return base.Channel.EndInsertRouteQueue(result);
        }
        
        private System.IAsyncResult OnBeginInsertRouteQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> routequeues = ((System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue>)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginInsertRouteQueue(routequeues, callback, asyncState);
        }
        
        private object[] OnEndInsertRouteQueue(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndInsertRouteQueue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertRouteQueueCompleted(object state) {
            if ((this.InsertRouteQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertRouteQueueCompleted(this, new InsertRouteQueueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertRouteQueueAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> routequeues) {
            this.InsertRouteQueueAsync(routequeues, null);
        }
        
        public void InsertRouteQueueAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> routequeues, object userState) {
            if ((this.onBeginInsertRouteQueueDelegate == null)) {
                this.onBeginInsertRouteQueueDelegate = new BeginOperationDelegate(this.OnBeginInsertRouteQueue);
            }
            if ((this.onEndInsertRouteQueueDelegate == null)) {
                this.onEndInsertRouteQueueDelegate = new EndOperationDelegate(this.OnEndInsertRouteQueue);
            }
            if ((this.onInsertRouteQueueCompletedDelegate == null)) {
                this.onInsertRouteQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertRouteQueueCompleted);
            }
            base.InvokeAsync(this.onBeginInsertRouteQueueDelegate, new object[] {
                        routequeues}, this.onEndInsertRouteQueueDelegate, this.onInsertRouteQueueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginDeleteRouteQueueByID(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRouteQueueByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndDeleteRouteQueueByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteRouteQueueByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRouteQueueByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginDeleteRouteQueueByID(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteRouteQueueByID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndDeleteRouteQueueByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteRouteQueueByIDCompleted(object state) {
            if ((this.DeleteRouteQueueByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRouteQueueByIDCompleted(this, new DeleteRouteQueueByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRouteQueueByIDAsync(string ID) {
            this.DeleteRouteQueueByIDAsync(ID, null);
        }
        
        public void DeleteRouteQueueByIDAsync(string ID, object userState) {
            if ((this.onBeginDeleteRouteQueueByIDDelegate == null)) {
                this.onBeginDeleteRouteQueueByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteRouteQueueByID);
            }
            if ((this.onEndDeleteRouteQueueByIDDelegate == null)) {
                this.onEndDeleteRouteQueueByIDDelegate = new EndOperationDelegate(this.OnEndDeleteRouteQueueByID);
            }
            if ((this.onDeleteRouteQueueByIDCompletedDelegate == null)) {
                this.onDeleteRouteQueueByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRouteQueueByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRouteQueueByIDDelegate, new object[] {
                        ID}, this.onEndDeleteRouteQueueByIDDelegate, this.onDeleteRouteQueueByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetRouteQueueByRouteID(string clientID, string routeID, string vehicleName, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRouteQueueByRouteID(clientID, routeID, vehicleName, pageIndex, pageSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetRouteQueueByRouteID(System.IAsyncResult result) {
            return base.Channel.EndGetRouteQueueByRouteID(result);
        }
        
        private System.IAsyncResult OnBeginGetRouteQueueByRouteID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string clientID = ((string)(inValues[0]));
            string routeID = ((string)(inValues[1]));
            string vehicleName = ((string)(inValues[2]));
            int pageIndex = ((int)(inValues[3]));
            int pageSize = ((int)(inValues[4]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetRouteQueueByRouteID(clientID, routeID, vehicleName, pageIndex, pageSize, callback, asyncState);
        }
        
        private object[] OnEndGetRouteQueueByRouteID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetRouteQueueByRouteID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRouteQueueByRouteIDCompleted(object state) {
            if ((this.GetRouteQueueByRouteIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRouteQueueByRouteIDCompleted(this, new GetRouteQueueByRouteIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRouteQueueByRouteIDAsync(string clientID, string routeID, string vehicleName, int pageIndex, int pageSize) {
            this.GetRouteQueueByRouteIDAsync(clientID, routeID, vehicleName, pageIndex, pageSize, null);
        }
        
        public void GetRouteQueueByRouteIDAsync(string clientID, string routeID, string vehicleName, int pageIndex, int pageSize, object userState) {
            if ((this.onBeginGetRouteQueueByRouteIDDelegate == null)) {
                this.onBeginGetRouteQueueByRouteIDDelegate = new BeginOperationDelegate(this.OnBeginGetRouteQueueByRouteID);
            }
            if ((this.onEndGetRouteQueueByRouteIDDelegate == null)) {
                this.onEndGetRouteQueueByRouteIDDelegate = new EndOperationDelegate(this.OnEndGetRouteQueueByRouteID);
            }
            if ((this.onGetRouteQueueByRouteIDCompletedDelegate == null)) {
                this.onGetRouteQueueByRouteIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRouteQueueByRouteIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetRouteQueueByRouteIDDelegate, new object[] {
                        clientID,
                        routeID,
                        vehicleName,
                        pageIndex,
                        pageSize}, this.onEndGetRouteQueueByRouteIDDelegate, this.onGetRouteQueueByRouteIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetAllRouteQueueByRouteID(string clientID, string routeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllRouteQueueByRouteID(clientID, routeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetAllRouteQueueByRouteID(System.IAsyncResult result) {
            return base.Channel.EndGetAllRouteQueueByRouteID(result);
        }
        
        private System.IAsyncResult OnBeginGetAllRouteQueueByRouteID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string clientID = ((string)(inValues[0]));
            string routeID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetAllRouteQueueByRouteID(clientID, routeID, callback, asyncState);
        }
        
        private object[] OnEndGetAllRouteQueueByRouteID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetAllRouteQueueByRouteID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllRouteQueueByRouteIDCompleted(object state) {
            if ((this.GetAllRouteQueueByRouteIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllRouteQueueByRouteIDCompleted(this, new GetAllRouteQueueByRouteIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllRouteQueueByRouteIDAsync(string clientID, string routeID) {
            this.GetAllRouteQueueByRouteIDAsync(clientID, routeID, null);
        }
        
        public void GetAllRouteQueueByRouteIDAsync(string clientID, string routeID, object userState) {
            if ((this.onBeginGetAllRouteQueueByRouteIDDelegate == null)) {
                this.onBeginGetAllRouteQueueByRouteIDDelegate = new BeginOperationDelegate(this.OnBeginGetAllRouteQueueByRouteID);
            }
            if ((this.onEndGetAllRouteQueueByRouteIDDelegate == null)) {
                this.onEndGetAllRouteQueueByRouteIDDelegate = new EndOperationDelegate(this.OnEndGetAllRouteQueueByRouteID);
            }
            if ((this.onGetAllRouteQueueByRouteIDCompletedDelegate == null)) {
                this.onGetAllRouteQueueByRouteIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllRouteQueueByRouteIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllRouteQueueByRouteIDDelegate, new object[] {
                        clientID,
                        routeID}, this.onEndGetAllRouteQueueByRouteIDDelegate, this.onGetAllRouteQueueByRouteIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginDeliverRouteQueueToVehicle(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> vehicles, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeliverRouteQueueToVehicle(vehicles, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndDeliverRouteQueueToVehicle(System.IAsyncResult result) {
            return base.Channel.EndDeliverRouteQueueToVehicle(result);
        }
        
        private System.IAsyncResult OnBeginDeliverRouteQueueToVehicle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> vehicles = ((System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue>)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginDeliverRouteQueueToVehicle(vehicles, callback, asyncState);
        }
        
        private object[] OnEndDeliverRouteQueueToVehicle(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndDeliverRouteQueueToVehicle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeliverRouteQueueToVehicleCompleted(object state) {
            if ((this.DeliverRouteQueueToVehicleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeliverRouteQueueToVehicleCompleted(this, new DeliverRouteQueueToVehicleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeliverRouteQueueToVehicleAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> vehicles) {
            this.DeliverRouteQueueToVehicleAsync(vehicles, null);
        }
        
        public void DeliverRouteQueueToVehicleAsync(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> vehicles, object userState) {
            if ((this.onBeginDeliverRouteQueueToVehicleDelegate == null)) {
                this.onBeginDeliverRouteQueueToVehicleDelegate = new BeginOperationDelegate(this.OnBeginDeliverRouteQueueToVehicle);
            }
            if ((this.onEndDeliverRouteQueueToVehicleDelegate == null)) {
                this.onEndDeliverRouteQueueToVehicleDelegate = new EndOperationDelegate(this.OnEndDeliverRouteQueueToVehicle);
            }
            if ((this.onDeliverRouteQueueToVehicleCompletedDelegate == null)) {
                this.onDeliverRouteQueueToVehicleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeliverRouteQueueToVehicleCompleted);
            }
            base.InvokeAsync(this.onBeginDeliverRouteQueueToVehicleDelegate, new object[] {
                        vehicles}, this.onEndDeliverRouteQueueToVehicleDelegate, this.onDeliverRouteQueueToVehicleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetTrafficRouteListOnVehicleByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrafficRouteListOnVehicleByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetTrafficRouteListOnVehicleByVehicleID(System.IAsyncResult result) {
            return base.Channel.EndGetTrafficRouteListOnVehicleByVehicleID(result);
        }
        
        private System.IAsyncResult OnBeginGetTrafficRouteListOnVehicleByVehicleID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vehicleID = ((string)(inValues[0]));
            string clientID = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetTrafficRouteListOnVehicleByVehicleID(vehicleID, clientID, callback, asyncState);
        }
        
        private object[] OnEndGetTrafficRouteListOnVehicleByVehicleID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetTrafficRouteListOnVehicleByVehicleID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrafficRouteListOnVehicleByVehicleIDCompleted(object state) {
            if ((this.GetTrafficRouteListOnVehicleByVehicleIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrafficRouteListOnVehicleByVehicleIDCompleted(this, new GetTrafficRouteListOnVehicleByVehicleIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrafficRouteListOnVehicleByVehicleIDAsync(string vehicleID, string clientID) {
            this.GetTrafficRouteListOnVehicleByVehicleIDAsync(vehicleID, clientID, null);
        }
        
        public void GetTrafficRouteListOnVehicleByVehicleIDAsync(string vehicleID, string clientID, object userState) {
            if ((this.onBeginGetTrafficRouteListOnVehicleByVehicleIDDelegate == null)) {
                this.onBeginGetTrafficRouteListOnVehicleByVehicleIDDelegate = new BeginOperationDelegate(this.OnBeginGetTrafficRouteListOnVehicleByVehicleID);
            }
            if ((this.onEndGetTrafficRouteListOnVehicleByVehicleIDDelegate == null)) {
                this.onEndGetTrafficRouteListOnVehicleByVehicleIDDelegate = new EndOperationDelegate(this.OnEndGetTrafficRouteListOnVehicleByVehicleID);
            }
            if ((this.onGetTrafficRouteListOnVehicleByVehicleIDCompletedDelegate == null)) {
                this.onGetTrafficRouteListOnVehicleByVehicleIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrafficRouteListOnVehicleByVehicleIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrafficRouteListOnVehicleByVehicleIDDelegate, new object[] {
                        vehicleID,
                        clientID}, this.onEndGetTrafficRouteListOnVehicleByVehicleIDDelegate, this.onGetTrafficRouteListOnVehicleByVehicleIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginCheckFenceNameExist(string strFenceName, short nType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckFenceNameExist(strFenceName, nType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndCheckFenceNameExist(System.IAsyncResult result) {
            return base.Channel.EndCheckFenceNameExist(result);
        }
        
        private System.IAsyncResult OnBeginCheckFenceNameExist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFenceName = ((string)(inValues[0]));
            short nType = ((short)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginCheckFenceNameExist(strFenceName, nType, callback, asyncState);
        }
        
        private object[] OnEndCheckFenceNameExist(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndCheckFenceNameExist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckFenceNameExistCompleted(object state) {
            if ((this.CheckFenceNameExistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckFenceNameExistCompleted(this, new CheckFenceNameExistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckFenceNameExistAsync(string strFenceName, short nType) {
            this.CheckFenceNameExistAsync(strFenceName, nType, null);
        }
        
        public void CheckFenceNameExistAsync(string strFenceName, short nType, object userState) {
            if ((this.onBeginCheckFenceNameExistDelegate == null)) {
                this.onBeginCheckFenceNameExistDelegate = new BeginOperationDelegate(this.OnBeginCheckFenceNameExist);
            }
            if ((this.onEndCheckFenceNameExistDelegate == null)) {
                this.onEndCheckFenceNameExistDelegate = new EndOperationDelegate(this.OnEndCheckFenceNameExist);
            }
            if ((this.onCheckFenceNameExistCompletedDelegate == null)) {
                this.onCheckFenceNameExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckFenceNameExistCompleted);
            }
            base.InvokeAsync(this.onBeginCheckFenceNameExistDelegate, new object[] {
                        strFenceName,
                        nType}, this.onEndCheckFenceNameExistDelegate, this.onCheckFenceNameExistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginDeleteCarFenceByFenceID(string fenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCarFenceByFenceID(fenceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndDeleteCarFenceByFenceID(System.IAsyncResult result) {
            return base.Channel.EndDeleteCarFenceByFenceID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCarFenceByFenceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fenceID = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginDeleteCarFenceByFenceID(fenceID, callback, asyncState);
        }
        
        private object[] OnEndDeleteCarFenceByFenceID(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndDeleteCarFenceByFenceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCarFenceByFenceIDCompleted(object state) {
            if ((this.DeleteCarFenceByFenceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCarFenceByFenceIDCompleted(this, new DeleteCarFenceByFenceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCarFenceByFenceIDAsync(string fenceID) {
            this.DeleteCarFenceByFenceIDAsync(fenceID, null);
        }
        
        public void DeleteCarFenceByFenceIDAsync(string fenceID, object userState) {
            if ((this.onBeginDeleteCarFenceByFenceIDDelegate == null)) {
                this.onBeginDeleteCarFenceByFenceIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteCarFenceByFenceID);
            }
            if ((this.onEndDeleteCarFenceByFenceIDDelegate == null)) {
                this.onEndDeleteCarFenceByFenceIDDelegate = new EndOperationDelegate(this.OnEndDeleteCarFenceByFenceID);
            }
            if ((this.onDeleteCarFenceByFenceIDCompletedDelegate == null)) {
                this.onDeleteCarFenceByFenceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCarFenceByFenceIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCarFenceByFenceIDDelegate, new object[] {
                        fenceID}, this.onEndDeleteCarFenceByFenceIDDelegate, this.onDeleteCarFenceByFenceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginGetVehicleByFence(string fenceID, short nState, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVehicleByFence(fenceID, nState, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndGetVehicleByFence(System.IAsyncResult result) {
            return base.Channel.EndGetVehicleByFence(result);
        }
        
        private System.IAsyncResult OnBeginGetVehicleByFence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fenceID = ((string)(inValues[0]));
            short nState = ((short)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginGetVehicleByFence(fenceID, nState, callback, asyncState);
        }
        
        private object[] OnEndGetVehicleByFence(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndGetVehicleByFence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVehicleByFenceCompleted(object state) {
            if ((this.GetVehicleByFenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVehicleByFenceCompleted(this, new GetVehicleByFenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVehicleByFenceAsync(string fenceID, short nState) {
            this.GetVehicleByFenceAsync(fenceID, nState, null);
        }
        
        public void GetVehicleByFenceAsync(string fenceID, short nState, object userState) {
            if ((this.onBeginGetVehicleByFenceDelegate == null)) {
                this.onBeginGetVehicleByFenceDelegate = new BeginOperationDelegate(this.OnBeginGetVehicleByFence);
            }
            if ((this.onEndGetVehicleByFenceDelegate == null)) {
                this.onEndGetVehicleByFenceDelegate = new EndOperationDelegate(this.OnEndGetVehicleByFence);
            }
            if ((this.onGetVehicleByFenceCompletedDelegate == null)) {
                this.onGetVehicleByFenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVehicleByFenceCompleted);
            }
            base.InvokeAsync(this.onBeginGetVehicleByFenceDelegate, new object[] {
                        fenceID,
                        nState}, this.onEndGetVehicleByFenceDelegate, this.onGetVehicleByFenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginCheckSpeedLimitidNameExist(string strSpeedName, string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckSpeedLimitidNameExist(strSpeedName, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndCheckSpeedLimitidNameExist(System.IAsyncResult result) {
            return base.Channel.EndCheckSpeedLimitidNameExist(result);
        }
        
        private System.IAsyncResult OnBeginCheckSpeedLimitidNameExist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strSpeedName = ((string)(inValues[0]));
            string id = ((string)(inValues[1]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginCheckSpeedLimitidNameExist(strSpeedName, id, callback, asyncState);
        }
        
        private object[] OnEndCheckSpeedLimitidNameExist(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndCheckSpeedLimitidNameExist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckSpeedLimitidNameExistCompleted(object state) {
            if ((this.CheckSpeedLimitidNameExistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckSpeedLimitidNameExistCompleted(this, new CheckSpeedLimitidNameExistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckSpeedLimitidNameExistAsync(string strSpeedName, string id) {
            this.CheckSpeedLimitidNameExistAsync(strSpeedName, id, null);
        }
        
        public void CheckSpeedLimitidNameExistAsync(string strSpeedName, string id, object userState) {
            if ((this.onBeginCheckSpeedLimitidNameExistDelegate == null)) {
                this.onBeginCheckSpeedLimitidNameExistDelegate = new BeginOperationDelegate(this.OnBeginCheckSpeedLimitidNameExist);
            }
            if ((this.onEndCheckSpeedLimitidNameExistDelegate == null)) {
                this.onEndCheckSpeedLimitidNameExistDelegate = new EndOperationDelegate(this.OnEndCheckSpeedLimitidNameExist);
            }
            if ((this.onCheckSpeedLimitidNameExistCompletedDelegate == null)) {
                this.onCheckSpeedLimitidNameExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckSpeedLimitidNameExistCompleted);
            }
            base.InvokeAsync(this.onBeginCheckSpeedLimitidNameExistDelegate, new object[] {
                        strSpeedName,
                        id}, this.onEndCheckSpeedLimitidNameExistDelegate, this.onCheckSpeedLimitidNameExistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.BeginCheckSpeedLimitNameExist(string strSpeedName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckSpeedLimitNameExist(strSpeedName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService.EndCheckSpeedLimitNameExist(System.IAsyncResult result) {
            return base.Channel.EndCheckSpeedLimitNameExist(result);
        }
        
        private System.IAsyncResult OnBeginCheckSpeedLimitNameExist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strSpeedName = ((string)(inValues[0]));
            return ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).BeginCheckSpeedLimitNameExist(strSpeedName, callback, asyncState);
        }
        
        private object[] OnEndCheckSpeedLimitNameExist(System.IAsyncResult result) {
            Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean retVal = ((Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService)(this)).EndCheckSpeedLimitNameExist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckSpeedLimitNameExistCompleted(object state) {
            if ((this.CheckSpeedLimitNameExistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckSpeedLimitNameExistCompleted(this, new CheckSpeedLimitNameExistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckSpeedLimitNameExistAsync(string strSpeedName) {
            this.CheckSpeedLimitNameExistAsync(strSpeedName, null);
        }
        
        public void CheckSpeedLimitNameExistAsync(string strSpeedName, object userState) {
            if ((this.onBeginCheckSpeedLimitNameExistDelegate == null)) {
                this.onBeginCheckSpeedLimitNameExistDelegate = new BeginOperationDelegate(this.OnBeginCheckSpeedLimitNameExist);
            }
            if ((this.onEndCheckSpeedLimitNameExistDelegate == null)) {
                this.onEndCheckSpeedLimitNameExistDelegate = new EndOperationDelegate(this.OnEndCheckSpeedLimitNameExist);
            }
            if ((this.onCheckSpeedLimitNameExistCompletedDelegate == null)) {
                this.onCheckSpeedLimitNameExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckSpeedLimitNameExistCompleted);
            }
            base.InvokeAsync(this.onBeginCheckSpeedLimitNameExistDelegate, new object[] {
                        strSpeedName}, this.onEndCheckSpeedLimitNameExistDelegate, this.onCheckSpeedLimitNameExistCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService CreateChannel() {
            return new TrafficManageServiceClientChannel(this);
        }
        
        private class TrafficManageServiceClientChannel : ChannelBase<Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService>, Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService {
            
            public TrafficManageServiceClientChannel(System.ServiceModel.ClientBase<Gsafety.PTMS.ServiceReference.TrafficManageService.ITrafficManageService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginInsertTrafficFence(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("InsertTrafficFence", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertTrafficFence(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("InsertTrafficFence", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTrafficFence(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficFence model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTrafficFence", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndUpdateTrafficFence(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("UpdateTrafficFence", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTrafficFenceByID(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTrafficFenceByID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteTrafficFenceByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("DeleteTrafficFenceByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrafficFence(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("GetTrafficFence", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5 EndGetTrafficFence(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficFencei7Zg_POJ5)(base.EndInvoke("GetTrafficFence", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsTrafficExists(string fenceName, string clientID, string fenceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fenceName;
                _args[1] = clientID;
                _args[2] = fenceID;
                System.IAsyncResult _result = base.BeginInvoke("IsTrafficExists", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsTrafficExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("IsTrafficExists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeliveredTrafficFenceListByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vehicleID;
                _args[1] = clientID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeliveredTrafficFenceListByVehicleID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 EndGetDeliveredTrafficFenceListByVehicleID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5)(base.EndInvoke("GetDeliveredTrafficFenceListByVehicleID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrafficFenceListOnVehicleByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vehicleID;
                _args[1] = clientID;
                System.IAsyncResult _result = base.BeginInvoke("GetTrafficFenceListOnVehicleByVehicleID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 EndGetTrafficFenceListOnVehicleByVehicleID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5)(base.EndInvoke("GetTrafficFenceListOnVehicleByVehicleID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrafficFenceListByVehicleIDAndFenceName(string fenceName, string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fenceName;
                _args[1] = vehicleID;
                _args[2] = clientID;
                System.IAsyncResult _result = base.BeginInvoke("GetTrafficFenceListByVehicleIDAndFenceName", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 EndGetTrafficFenceListByVehicleIDAndFenceName(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficFencei7Zg_POJ5)(base.EndInvoke("GetTrafficFenceListByVehicleIDAndFenceName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertFenceQueue(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> fencequeues, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fencequeues;
                System.IAsyncResult _result = base.BeginInvoke("InsertFenceQueue", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertFenceQueue(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("InsertFenceQueue", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFenceQueueByID(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFenceQueueByID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteFenceQueueByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("DeleteFenceQueueByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginObsoleteFence(string fenceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fenceID;
                System.IAsyncResult _result = base.BeginInvoke("ObsoleteFence", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndObsoleteFence(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("ObsoleteFence", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsFenceDelivered(string fenceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fenceID;
                System.IAsyncResult _result = base.BeginInvoke("IsFenceDelivered", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsFenceDelivered(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("IsFenceDelivered", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllFenceQueueListByFenceID(string clientID, string fenceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientID;
                _args[1] = fenceID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllFenceQueueListByFenceID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 EndGetAllFenceQueueListByFenceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5)(base.EndInvoke("GetAllFenceQueueListByFenceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFenceQueueListByFenceID(string fenceID, string clientID, string vehicleName, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fenceID;
                _args[1] = clientID;
                _args[2] = vehicleName;
                _args[3] = pageIndex;
                _args[4] = pageSize;
                System.IAsyncResult _result = base.BeginInvoke("GetFenceQueueListByFenceID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 EndGetFenceQueueListByFenceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfFenceQueuei7Zg_POJ5)(base.EndInvoke("GetFenceQueueListByFenceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeliverFenceQueueToVehicle(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.FenceQueue> vehicles, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = vehicles;
                System.IAsyncResult _result = base.BeginInvoke("DeliverFenceQueueToVehicle", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeliverFenceQueueToVehicle(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("DeliverFenceQueueToVehicle", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertTrafficRoute(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("InsertTrafficRoute", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertTrafficRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("InsertTrafficRoute", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTrafficRoute(Gsafety.PTMS.ServiceReference.TrafficManageService.TrafficRoute model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTrafficRoute", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndUpdateTrafficRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("UpdateTrafficRoute", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTrafficRouteByID(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTrafficRouteByID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteTrafficRouteByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("DeleteTrafficRouteByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrafficRoute(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("GetTrafficRoute", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5 EndGetTrafficRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfTrafficRoutei7Zg_POJ5)(base.EndInvoke("GetTrafficRoute", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsRouteExists(string routeName, string clientID, string routeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = routeName;
                _args[1] = clientID;
                _args[2] = routeID;
                System.IAsyncResult _result = base.BeginInvoke("IsRouteExists", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsRouteExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("IsRouteExists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrafficRouteListByVehicleIDAndRouteName(string routeName, string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = routeName;
                _args[1] = vehicleID;
                _args[2] = clientID;
                System.IAsyncResult _result = base.BeginInvoke("GetTrafficRouteListByVehicleIDAndRouteName", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 EndGetTrafficRouteListByVehicleIDAndRouteName(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5)(base.EndInvoke("GetTrafficRouteListByVehicleIDAndRouteName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginObsoleteTrafficeRoute(string routeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = routeID;
                System.IAsyncResult _result = base.BeginInvoke("ObsoleteTrafficeRoute", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndObsoleteTrafficeRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("ObsoleteTrafficeRoute", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsRouteDelivered(string routeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = routeID;
                System.IAsyncResult _result = base.BeginInvoke("IsRouteDelivered", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndIsRouteDelivered(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("IsRouteDelivered", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeliveredTrafficRouteListByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vehicleID;
                _args[1] = clientID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeliveredTrafficRouteListByVehicleID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 EndGetDeliveredTrafficRouteListByVehicleID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfTrafficRoutei7Zg_POJ5)(base.EndInvoke("GetDeliveredTrafficRouteListByVehicleID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertRouteQueue(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> routequeues, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = routequeues;
                System.IAsyncResult _result = base.BeginInvoke("InsertRouteQueue", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndInsertRouteQueue(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("InsertRouteQueue", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRouteQueueByID(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRouteQueueByID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteRouteQueueByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("DeleteRouteQueueByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRouteQueueByRouteID(string clientID, string routeID, string vehicleName, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = clientID;
                _args[1] = routeID;
                _args[2] = vehicleName;
                _args[3] = pageIndex;
                _args[4] = pageSize;
                System.IAsyncResult _result = base.BeginInvoke("GetRouteQueueByRouteID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 EndGetRouteQueueByRouteID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5)(base.EndInvoke("GetRouteQueueByRouteID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllRouteQueueByRouteID(string clientID, string routeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientID;
                _args[1] = routeID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllRouteQueueByRouteID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 EndGetAllRouteQueueByRouteID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5)(base.EndInvoke("GetAllRouteQueueByRouteID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeliverRouteQueueToVehicle(System.Collections.ObjectModel.ObservableCollection<Gsafety.PTMS.ServiceReference.TrafficManageService.RouteQueue> vehicles, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = vehicles;
                System.IAsyncResult _result = base.BeginInvoke("DeliverRouteQueueToVehicle", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeliverRouteQueueToVehicle(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("DeliverRouteQueueToVehicle", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrafficRouteListOnVehicleByVehicleID(string vehicleID, string clientID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vehicleID;
                _args[1] = clientID;
                System.IAsyncResult _result = base.BeginInvoke("GetTrafficRouteListOnVehicleByVehicleID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 EndGetTrafficRouteListOnVehicleByVehicleID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5 _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfRouteQueuei7Zg_POJ5)(base.EndInvoke("GetTrafficRouteListOnVehicleByVehicleID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckFenceNameExist(string strFenceName, short nType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = strFenceName;
                _args[1] = nType;
                System.IAsyncResult _result = base.BeginInvoke("CheckFenceNameExist", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndCheckFenceNameExist(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("CheckFenceNameExist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteCarFenceByFenceID(string fenceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fenceID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCarFenceByFenceID", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndDeleteCarFenceByFenceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("DeleteCarFenceByFenceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVehicleByFence(string fenceID, short nState, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fenceID;
                _args[1] = nState;
                System.IAsyncResult _result = base.BeginInvoke("GetVehicleByFence", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ EndGetVehicleByFence(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.MultiMessageOfVehicle8UxEljkQ)(base.EndInvoke("GetVehicleByFence", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckSpeedLimitidNameExist(string strSpeedName, string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = strSpeedName;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("CheckSpeedLimitidNameExist", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndCheckSpeedLimitidNameExist(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("CheckSpeedLimitidNameExist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckSpeedLimitNameExist(string strSpeedName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = strSpeedName;
                System.IAsyncResult _result = base.BeginInvoke("CheckSpeedLimitNameExist", _args, callback, asyncState);
                return _result;
            }
            
            public Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean EndCheckSpeedLimitNameExist(System.IAsyncResult result) {
                object[] _args = new object[0];
                Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean _result = ((Gsafety.PTMS.ServiceReference.TrafficManageService.SingleMessageOfboolean)(base.EndInvoke("CheckSpeedLimitNameExist", _args, result)));
                return _result;
            }
        }
    }
}
